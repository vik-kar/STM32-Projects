
Automated_Plant_Watering_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000450  08000458  00001458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000450  08000450  00001458  2**0
                  CONTENTS
  4 .ARM          00000000  08000450  08000450  00001458  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000450  08000458  00001458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000450  08000450  00001450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000454  08000454  00001454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000458  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000458  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cfe  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000037d  00000000  00000000  00002186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  00002508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000008e  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ea35  00000000  00000000  0000266e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000012c0  00000000  00000000  000110a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053e08  00000000  00000000  00012363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006616b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001f4  00000000  00000000  000661b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000663a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000438 	.word	0x08000438

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000438 	.word	0x08000438

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <pb0_adc_init>:
#define ADC1EOC			(1U << 1)
#define CR2ADON			(1U << 0)
#define ADC_EOCEN		(1U << 5)


void pb0_adc_init(){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	/* Configure the ADC GPIO pin (PB0 --> GPIOB) */
	RCC->AHB1ENR |= GPIOBEN;
 8000218:	4b18      	ldr	r3, [pc, #96]	@ (800027c <pb0_adc_init+0x68>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800021c:	4a17      	ldr	r2, [pc, #92]	@ (800027c <pb0_adc_init+0x68>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Configure pin PB0
	 * Analog mode is (MSB) 11 (LSB)
	 * PB0 is bits 0 and 1 in the mode register
	*/
	GPIOB->MODER |= (1U << 0);
 8000224:	4b16      	ldr	r3, [pc, #88]	@ (8000280 <pb0_adc_init+0x6c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a15      	ldr	r2, [pc, #84]	@ (8000280 <pb0_adc_init+0x6c>)
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 1);
 8000230:	4b13      	ldr	r3, [pc, #76]	@ (8000280 <pb0_adc_init+0x6c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a12      	ldr	r2, [pc, #72]	@ (8000280 <pb0_adc_init+0x6c>)
 8000236:	f043 0302 	orr.w	r3, r3, #2
 800023a:	6013      	str	r3, [r2, #0]

	/* Now, we enable clock access the ADC module */
	RCC->APB2ENR |= ADC1EN;
 800023c:	4b0f      	ldr	r3, [pc, #60]	@ (800027c <pb0_adc_init+0x68>)
 800023e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000240:	4a0e      	ldr	r2, [pc, #56]	@ (800027c <pb0_adc_init+0x68>)
 8000242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000246:	6453      	str	r3, [r2, #68]	@ 0x44

	/* Enable ADC end-of-conversion interrupt */
	ADC1->CR1 |= ADC_EOCEN;
 8000248:	4b0e      	ldr	r3, [pc, #56]	@ (8000284 <pb0_adc_init+0x70>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	4a0d      	ldr	r2, [pc, #52]	@ (8000284 <pb0_adc_init+0x70>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6053      	str	r3, [r2, #4]

	/* Enable the ADC Interrupt in NVIC */
	NVIC_EnableIRQ(ADC_IRQn);
 8000254:	2012      	movs	r0, #18
 8000256:	f7ff ffbf 	bl	80001d8 <__NVIC_EnableIRQ>

	/* In SQR3, we assign sequence positions for our channels
	 * PB0 corresponds to ADC1 Channel 8
	 * We've created a symbolic name, now we can assign that to SQR3
	*/
	ADC1->SQR3 |= SQR3CHAN8;
 800025a:	4b0a      	ldr	r3, [pc, #40]	@ (8000284 <pb0_adc_init+0x70>)
 800025c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800025e:	4a09      	ldr	r2, [pc, #36]	@ (8000284 <pb0_adc_init+0x70>)
 8000260:	f043 0308 	orr.w	r3, r3, #8
 8000264:	6353      	str	r3, [r2, #52]	@ 0x34

	/* Now, we need to configure SQR1's L field, where we set the total number of conversions in the sequence */
	/* since it is 0-indexed, and we are doing 1 conversion, the value we set is 1-1 = 0. For ex: 6 conversions --> 6-1 = 5 */
	/* We can just set this whole thing to 0 */
	ADC1->SQR1 = 0x00;
 8000266:	4b07      	ldr	r3, [pc, #28]	@ (8000284 <pb0_adc_init+0x70>)
 8000268:	2200      	movs	r2, #0
 800026a:	62da      	str	r2, [r3, #44]	@ 0x2c

	/* Finally, we enable the ADC conversion through the control register */
	ADC1->CR2 |= CR2ADON;
 800026c:	4b05      	ldr	r3, [pc, #20]	@ (8000284 <pb0_adc_init+0x70>)
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	4a04      	ldr	r2, [pc, #16]	@ (8000284 <pb0_adc_init+0x70>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6093      	str	r3, [r2, #8]

}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40023800 	.word	0x40023800
 8000280:	40020400 	.word	0x40020400
 8000284:	40012000 	.word	0x40012000

08000288 <start_conversion>:

void start_conversion(void){
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	/* Set bit 1 (continuous conversion bit) in ADC Control Register 2 */
	ADC1->CR2 |= CONTCONV;
 800028c:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <start_conversion+0x28>)
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	4a07      	ldr	r2, [pc, #28]	@ (80002b0 <start_conversion+0x28>)
 8000292:	f043 0302 	orr.w	r3, r3, #2
 8000296:	6093      	str	r3, [r2, #8]

	/* Begin the ADC conversion using the SWSTART bit */
	ADC1->CR2 |= ADC1SWSTART;
 8000298:	4b05      	ldr	r3, [pc, #20]	@ (80002b0 <start_conversion+0x28>)
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	4a04      	ldr	r2, [pc, #16]	@ (80002b0 <start_conversion+0x28>)
 800029e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002a2:	6093      	str	r3, [r2, #8]
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40012000 	.word	0x40012000

080002b4 <main>:

uint32_t sensor_value;
uint32_t dry_threshold = 700;
uint32_t wet_threshold = 200;

int main(void){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	//pa6_off();
	pb0_adc_init();
 80002b8:	f7ff ffac 	bl	8000214 <pb0_adc_init>
	pa6_init();
 80002bc:	f000 f836 	bl	800032c <pa6_init>

	start_conversion();
 80002c0:	f7ff ffe2 	bl	8000288 <start_conversion>

	while(1){
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <main+0x10>

080002c8 <adc_callback>:

	}
}

static void adc_callback(void){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	sensor_value = ADC1->DR;
 80002cc:	4b0b      	ldr	r3, [pc, #44]	@ (80002fc <adc_callback+0x34>)
 80002ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000300 <adc_callback+0x38>)
 80002d2:	6013      	str	r3, [r2, #0]

	if(sensor_value >= 2500){
 80002d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000300 <adc_callback+0x38>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80002dc:	4293      	cmp	r3, r2
 80002de:	d902      	bls.n	80002e6 <adc_callback+0x1e>
		pa6_on();
 80002e0:	f000 f842 	bl	8000368 <pa6_on>
	}
	else if (sensor_value <= 1900){
		pa6_off();
	}

}
 80002e4:	e007      	b.n	80002f6 <adc_callback+0x2e>
	else if (sensor_value <= 1900){
 80002e6:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <adc_callback+0x38>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d801      	bhi.n	80002f6 <adc_callback+0x2e>
		pa6_off();
 80002f2:	f000 f845 	bl	8000380 <pa6_off>
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40012000 	.word	0x40012000
 8000300:	2000001c 	.word	0x2000001c

08000304 <ADC_IRQHandler>:

void ADC_IRQHandler(void){
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	/* Check for ADC EOC flag */
	if((ADC1->SR & ADC1EOC) != 0){
 8000308:	4b07      	ldr	r3, [pc, #28]	@ (8000328 <ADC_IRQHandler+0x24>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f003 0302 	and.w	r3, r3, #2
 8000310:	2b00      	cmp	r3, #0
 8000312:	d007      	beq.n	8000324 <ADC_IRQHandler+0x20>
		/* Clear EOC bit */
		ADC1->SR &=~ ADC1EOC;
 8000314:	4b04      	ldr	r3, [pc, #16]	@ (8000328 <ADC_IRQHandler+0x24>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a03      	ldr	r2, [pc, #12]	@ (8000328 <ADC_IRQHandler+0x24>)
 800031a:	f023 0302 	bic.w	r3, r3, #2
 800031e:	6013      	str	r3, [r2, #0]

		/* Execute callback */
		adc_callback();
 8000320:	f7ff ffd2 	bl	80002c8 <adc_callback>
	}
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40012000 	.word	0x40012000

0800032c <pa6_init>:
void pa3_off(){
	/* Left shift by 16 to get into the reset range */
	GPIOA->BSRR = (PIN3_ON << 16);
}

void pa6_init(){
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 8000330:	4b0b      	ldr	r3, [pc, #44]	@ (8000360 <pa6_init+0x34>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000334:	4a0a      	ldr	r2, [pc, #40]	@ (8000360 <pa6_init+0x34>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER |=  (1U << 12);
 800033c:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <pa6_init+0x38>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a08      	ldr	r2, [pc, #32]	@ (8000364 <pa6_init+0x38>)
 8000342:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000346:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~ (1U << 13);
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <pa6_init+0x38>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a05      	ldr	r2, [pc, #20]	@ (8000364 <pa6_init+0x38>)
 800034e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000352:	6013      	str	r3, [r2, #0]
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40023800 	.word	0x40023800
 8000364:	40020000 	.word	0x40020000

08000368 <pa6_on>:

void pa6_on(){
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	GPIOA->BSRR = PIN6_ON;
 800036c:	4b03      	ldr	r3, [pc, #12]	@ (800037c <pa6_on+0x14>)
 800036e:	2240      	movs	r2, #64	@ 0x40
 8000370:	619a      	str	r2, [r3, #24]
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	40020000 	.word	0x40020000

08000380 <pa6_off>:

void pa6_off(){
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (PIN6_ON << 16);
 8000384:	4b04      	ldr	r3, [pc, #16]	@ (8000398 <pa6_off+0x18>)
 8000386:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800038a:	619a      	str	r2, [r3, #24]
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40020000 	.word	0x40020000

0800039c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800039c:	480d      	ldr	r0, [pc, #52]	@ (80003d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a4:	480c      	ldr	r0, [pc, #48]	@ (80003d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a6:	490d      	ldr	r1, [pc, #52]	@ (80003dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a8:	4a0d      	ldr	r2, [pc, #52]	@ (80003e0 <LoopForever+0xe>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ac:	e002      	b.n	80003b4 <LoopCopyDataInit>

080003ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b2:	3304      	adds	r3, #4

080003b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b8:	d3f9      	bcc.n	80003ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ba:	4a0a      	ldr	r2, [pc, #40]	@ (80003e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003bc:	4c0a      	ldr	r4, [pc, #40]	@ (80003e8 <LoopForever+0x16>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c0:	e001      	b.n	80003c6 <LoopFillZerobss>

080003c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c4:	3204      	adds	r2, #4

080003c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c8:	d3fb      	bcc.n	80003c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ca:	f000 f811 	bl	80003f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ce:	f7ff ff71 	bl	80002b4 <main>

080003d2 <LoopForever>:

LoopForever:
  b LoopForever
 80003d2:	e7fe      	b.n	80003d2 <LoopForever>
  ldr   r0, =_estack
 80003d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e0:	08000458 	.word	0x08000458
  ldr r2, =_sbss
 80003e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003e8:	20000020 	.word	0x20000020

080003ec <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ec:	e7fe      	b.n	80003ec <BusFault_Handler>
	...

080003f0 <__libc_init_array>:
 80003f0:	b570      	push	{r4, r5, r6, lr}
 80003f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000428 <__libc_init_array+0x38>)
 80003f4:	4c0d      	ldr	r4, [pc, #52]	@ (800042c <__libc_init_array+0x3c>)
 80003f6:	1b64      	subs	r4, r4, r5
 80003f8:	10a4      	asrs	r4, r4, #2
 80003fa:	2600      	movs	r6, #0
 80003fc:	42a6      	cmp	r6, r4
 80003fe:	d109      	bne.n	8000414 <__libc_init_array+0x24>
 8000400:	4d0b      	ldr	r5, [pc, #44]	@ (8000430 <__libc_init_array+0x40>)
 8000402:	4c0c      	ldr	r4, [pc, #48]	@ (8000434 <__libc_init_array+0x44>)
 8000404:	f000 f818 	bl	8000438 <_init>
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	10a4      	asrs	r4, r4, #2
 800040c:	2600      	movs	r6, #0
 800040e:	42a6      	cmp	r6, r4
 8000410:	d105      	bne.n	800041e <__libc_init_array+0x2e>
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f855 3b04 	ldr.w	r3, [r5], #4
 8000418:	4798      	blx	r3
 800041a:	3601      	adds	r6, #1
 800041c:	e7ee      	b.n	80003fc <__libc_init_array+0xc>
 800041e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000422:	4798      	blx	r3
 8000424:	3601      	adds	r6, #1
 8000426:	e7f2      	b.n	800040e <__libc_init_array+0x1e>
 8000428:	08000450 	.word	0x08000450
 800042c:	08000450 	.word	0x08000450
 8000430:	08000450 	.word	0x08000450
 8000434:	08000454 	.word	0x08000454

08000438 <_init>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr

08000444 <_fini>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	bf00      	nop
 8000448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044a:	bc08      	pop	{r3}
 800044c:	469e      	mov	lr, r3
 800044e:	4770      	bx	lr
