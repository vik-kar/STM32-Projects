
7_uart_modular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001230  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080013d0  080013d0  000023d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001424  08001424  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001424  08001424  00002424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800142c  0800142c  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800142c  0800142c  0000242c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001430  08001430  00002430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001434  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001490  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001490  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d24  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000470  00000000  00000000  00003db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  00004220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000e4  00000000  00000000  00004370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000faba  00000000  00000000  00004454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a3f  00000000  00000000  00013f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055a12  00000000  00000000  0001594d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006b35f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ba4  00000000  00000000  0006b3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0006bf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080013b8 	.word	0x080013b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080013b8 	.word	0x080013b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#include <stdio.h>
#include "stm32f4xx.h"
#include "uart.h"


int main(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	uart2_tx_init();
 8000284:	f000 f8b6 	bl	80003f4 <uart2_tx_init>

	while(1){
		printf("Hello from STM32F4.........\n\r");
 8000288:	4801      	ldr	r0, [pc, #4]	@ (8000290 <main+0x10>)
 800028a:	f000 fa29 	bl	80006e0 <iprintf>
 800028e:	e7fb      	b.n	8000288 <main+0x8>
 8000290:	080013d0 	.word	0x080013d0

08000294 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af00      	add	r7, sp, #0
 800029a:	60f8      	str	r0, [r7, #12]
 800029c:	60b9      	str	r1, [r7, #8]
 800029e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a0:	2300      	movs	r3, #0
 80002a2:	617b      	str	r3, [r7, #20]
 80002a4:	e00a      	b.n	80002bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002a6:	f3af 8000 	nop.w
 80002aa:	4601      	mov	r1, r0
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	1c5a      	adds	r2, r3, #1
 80002b0:	60ba      	str	r2, [r7, #8]
 80002b2:	b2ca      	uxtb	r2, r1
 80002b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	3301      	adds	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
 80002bc:	697a      	ldr	r2, [r7, #20]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	dbf0      	blt.n	80002a6 <_read+0x12>
  }

  return len;
 80002c4:	687b      	ldr	r3, [r7, #4]
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3718      	adds	r7, #24
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}

080002ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b086      	sub	sp, #24
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	60f8      	str	r0, [r7, #12]
 80002d6:	60b9      	str	r1, [r7, #8]
 80002d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	e009      	b.n	80002f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	60ba      	str	r2, [r7, #8]
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f877 	bl	80003dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	3301      	adds	r3, #1
 80002f2:	617b      	str	r3, [r7, #20]
 80002f4:	697a      	ldr	r2, [r7, #20]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	dbf1      	blt.n	80002e0 <_write+0x12>
  }
  return len;
 80002fc:	687b      	ldr	r3, [r7, #4]
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3718      	adds	r7, #24
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}

08000306 <_close>:

int _close(int file)
{
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800030e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000312:	4618      	mov	r0, r3
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr

0800031e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800031e:	b480      	push	{r7}
 8000320:	b083      	sub	sp, #12
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
 8000326:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800032e:	605a      	str	r2, [r3, #4]
  return 0;
 8000330:	2300      	movs	r3, #0
}
 8000332:	4618      	mov	r0, r3
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr

0800033e <_isatty>:

int _isatty(int file)
{
 800033e:	b480      	push	{r7}
 8000340:	b083      	sub	sp, #12
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000346:	2301      	movs	r3, #1
}
 8000348:	4618      	mov	r0, r3
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000360:	2300      	movs	r3, #0
}
 8000362:	4618      	mov	r0, r3
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
	...

08000370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000378:	4a14      	ldr	r2, [pc, #80]	@ (80003cc <_sbrk+0x5c>)
 800037a:	4b15      	ldr	r3, [pc, #84]	@ (80003d0 <_sbrk+0x60>)
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000384:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <_sbrk+0x64>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d102      	bne.n	8000392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800038c:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <_sbrk+0x64>)
 800038e:	4a12      	ldr	r2, [pc, #72]	@ (80003d8 <_sbrk+0x68>)
 8000390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000392:	4b10      	ldr	r3, [pc, #64]	@ (80003d4 <_sbrk+0x64>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4413      	add	r3, r2
 800039a:	693a      	ldr	r2, [r7, #16]
 800039c:	429a      	cmp	r2, r3
 800039e:	d207      	bcs.n	80003b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003a0:	f000 f9b8 	bl	8000714 <__errno>
 80003a4:	4603      	mov	r3, r0
 80003a6:	220c      	movs	r2, #12
 80003a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003ae:	e009      	b.n	80003c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003b0:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <_sbrk+0x64>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003b6:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <_sbrk+0x64>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4413      	add	r3, r2
 80003be:	4a05      	ldr	r2, [pc, #20]	@ (80003d4 <_sbrk+0x64>)
 80003c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003c2:	68fb      	ldr	r3, [r7, #12]
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3718      	adds	r7, #24
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20020000 	.word	0x20020000
 80003d0:	00000400 	.word	0x00000400
 80003d4:	20000078 	.word	0x20000078
 80003d8:	200001c8 	.word	0x200001c8

080003dc <__io_putchar>:


void uart2_write(int ch);
int __io_putchar(int ch);

int __io_putchar(int ch){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f000 f851 	bl	800048c <uart2_write>
	return ch;
 80003ea:	687b      	ldr	r3, [r7, #4]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <uart2_tx_init>:

void uart2_tx_init(void){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	/*******************************Configure uart gpio pin*******************************/

	/*Enable clock access to gpioa*/
	RCC->AHB1ENR |= GPIOAEN;
 80003f8:	4b20      	ldr	r3, [pc, #128]	@ (800047c <uart2_tx_init+0x88>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fc:	4a1f      	ldr	r2, [pc, #124]	@ (800047c <uart2_tx_init+0x88>)
 80003fe:	f043 0301 	orr.w	r3, r3, #1
 8000402:	6313      	str	r3, [r2, #48]	@ 0x30
	 * We need to visit GPIO port mode register - this register is a 32 bit register that determines the function of each pin in a specific GPIO port (ex GPIOA, GPIOB)
	 * Through this register, we can configure each pin as GPI/O, AF mode or analog mode
	 * We want to set MODER2 (for pin 2). '10' is AF mode. Pin 2 occupies bit 4 (0) and bit 5 (1)
	 */

	GPIOA->MODER &=~(1U << 4); //bit 4 to 0
 8000404:	4b1e      	ldr	r3, [pc, #120]	@ (8000480 <uart2_tx_init+0x8c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a1d      	ldr	r2, [pc, #116]	@ (8000480 <uart2_tx_init+0x8c>)
 800040a:	f023 0310 	bic.w	r3, r3, #16
 800040e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5); // bit 5 to 1
 8000410:	4b1b      	ldr	r3, [pc, #108]	@ (8000480 <uart2_tx_init+0x8c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a1a      	ldr	r2, [pc, #104]	@ (8000480 <uart2_tx_init+0x8c>)
 8000416:	f043 0320 	orr.w	r3, r3, #32
 800041a:	6013      	str	r3, [r2, #0]

	/*set PA2 alternate function type to UART_TX (AF07)*/
	/*To access AFRL, we need to access element [0] of the AFR array*/
	GPIOA->AFR[0] |= 	(1U << 8);
 800041c:	4b18      	ldr	r3, [pc, #96]	@ (8000480 <uart2_tx_init+0x8c>)
 800041e:	6a1b      	ldr	r3, [r3, #32]
 8000420:	4a17      	ldr	r2, [pc, #92]	@ (8000480 <uart2_tx_init+0x8c>)
 8000422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000426:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 	(1U << 9);
 8000428:	4b15      	ldr	r3, [pc, #84]	@ (8000480 <uart2_tx_init+0x8c>)
 800042a:	6a1b      	ldr	r3, [r3, #32]
 800042c:	4a14      	ldr	r2, [pc, #80]	@ (8000480 <uart2_tx_init+0x8c>)
 800042e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000432:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 	(1U << 10);
 8000434:	4b12      	ldr	r3, [pc, #72]	@ (8000480 <uart2_tx_init+0x8c>)
 8000436:	6a1b      	ldr	r3, [r3, #32]
 8000438:	4a11      	ldr	r2, [pc, #68]	@ (8000480 <uart2_tx_init+0x8c>)
 800043a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800043e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=   ~(1U << 11);
 8000440:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <uart2_tx_init+0x8c>)
 8000442:	6a1b      	ldr	r3, [r3, #32]
 8000444:	4a0e      	ldr	r2, [pc, #56]	@ (8000480 <uart2_tx_init+0x8c>)
 8000446:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800044a:	6213      	str	r3, [r2, #32]

	/*******************************Configure uart module*******************************/
	/*Enable clock access to UARt2 - remember, it is connected to the APB1 bus*/
	RCC->APB1ENR |= UART2EN;
 800044c:	4b0b      	ldr	r3, [pc, #44]	@ (800047c <uart2_tx_init+0x88>)
 800044e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000450:	4a0a      	ldr	r2, [pc, #40]	@ (800047c <uart2_tx_init+0x88>)
 8000452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000456:	6413      	str	r3, [r2, #64]	@ 0x40
	 * why do we need a baud rate
	 * - it defines the speed of communication for the UART module - the baud rate sets how many bits are transmitted per second
	 *   over the UART connection
	 * - there is an equation to derive the baud rate, in a separate function
	 */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000458:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800045c:	4909      	ldr	r1, [pc, #36]	@ (8000484 <uart2_tx_init+0x90>)
 800045e:	480a      	ldr	r0, [pc, #40]	@ (8000488 <uart2_tx_init+0x94>)
 8000460:	f000 f82c 	bl	80004bc <uart_set_baudrate>

	/*configure the transfer direction (we want TX)*/
	/*
	 * we need to go to the control register and see which bit enables the transmitter mode of the UART
	 */
	USART2->CR1 = CR1_TE; //transmitter enable
 8000464:	4b08      	ldr	r3, [pc, #32]	@ (8000488 <uart2_tx_init+0x94>)
 8000466:	2208      	movs	r2, #8
 8000468:	60da      	str	r2, [r3, #12]


	/*Enable the uart module*/
	//also needs control register 1. Bit 13 is UE (UART enable)
	//we are doing |= here because we have already configured the transmitter (TE) so we do not want to wipe that out
	USART2->CR1 |= CR1_UE;
 800046a:	4b07      	ldr	r3, [pc, #28]	@ (8000488 <uart2_tx_init+0x94>)
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	4a06      	ldr	r2, [pc, #24]	@ (8000488 <uart2_tx_init+0x94>)
 8000470:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000474:	60d3      	str	r3, [r2, #12]

}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40023800 	.word	0x40023800
 8000480:	40020000 	.word	0x40020000
 8000484:	00f42400 	.word	0x00f42400
 8000488:	40004400 	.word	0x40004400

0800048c <uart2_write>:

void uart2_write(int ch){
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	 * - we need to check the UART status register for this
	 */

	//in parenthesis below: This will return true if the 7th bit is set inside the UART status register (SR)

	while(!(USART2->SR & SR_TXE)){
 8000494:	bf00      	nop
 8000496:	4b08      	ldr	r3, [pc, #32]	@ (80004b8 <uart2_write+0x2c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0f9      	beq.n	8000496 <uart2_write+0xa>
	//DR = data register
	/*
	 * & 0xFF operation ensures that only the lowest 8 bits (1 byte) of the value 'ch' are written to the data register
	 * UART transmission is typically byte-oriented, meaning only 8 bits can be transmitted at a time. (& 0xFF) masks out any higher-order bits that may exist
	 */
	USART2->DR = (ch & 0xFF); //transmit 8 bits
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a04      	ldr	r2, [pc, #16]	@ (80004b8 <uart2_write+0x2c>)
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	6053      	str	r3, [r2, #4]
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40004400 	.word	0x40004400

080004bc <uart_set_baudrate>:

//The first argument works with any UART module (UART1, UART2, etc)
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80004c8:	6879      	ldr	r1, [r7, #4]
 80004ca:	68b8      	ldr	r0, [r7, #8]
 80004cc:	f000 f808 	bl	80004e0 <compute_uart_bd>
 80004d0:	4603      	mov	r3, r0
 80004d2:	461a      	mov	r2, r3
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	609a      	str	r2, [r3, #8]
}
 80004d8:	bf00      	nop
 80004da:	3710      	adds	r7, #16
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
	//this returned value will be written into the UART baud rate register
	return ((PeriphClk + (BaudRate/2U)) / BaudRate);
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	085a      	lsrs	r2, r3, #1
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	441a      	add	r2, r3
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f8:	b29b      	uxth	r3, r3
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
	...

08000508 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000508:	480d      	ldr	r0, [pc, #52]	@ (8000540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800050c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000510:	480c      	ldr	r0, [pc, #48]	@ (8000544 <LoopForever+0x6>)
  ldr r1, =_edata
 8000512:	490d      	ldr	r1, [pc, #52]	@ (8000548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000514:	4a0d      	ldr	r2, [pc, #52]	@ (800054c <LoopForever+0xe>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000518:	e002      	b.n	8000520 <LoopCopyDataInit>

0800051a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800051c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051e:	3304      	adds	r3, #4

08000520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000524:	d3f9      	bcc.n	800051a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000526:	4a0a      	ldr	r2, [pc, #40]	@ (8000550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000528:	4c0a      	ldr	r4, [pc, #40]	@ (8000554 <LoopForever+0x16>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800052c:	e001      	b.n	8000532 <LoopFillZerobss>

0800052e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000530:	3204      	adds	r2, #4

08000532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000534:	d3fb      	bcc.n	800052e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000536:	f000 f8f3 	bl	8000720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053a:	f7ff fea1 	bl	8000280 <main>

0800053e <LoopForever>:

LoopForever:
  b LoopForever
 800053e:	e7fe      	b.n	800053e <LoopForever>
  ldr   r0, =_estack
 8000540:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000548:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800054c:	08001434 	.word	0x08001434
  ldr r2, =_sbss
 8000550:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000554:	200001c8 	.word	0x200001c8

08000558 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000558:	e7fe      	b.n	8000558 <ADC_IRQHandler>
	...

0800055c <std>:
 800055c:	2300      	movs	r3, #0
 800055e:	b510      	push	{r4, lr}
 8000560:	4604      	mov	r4, r0
 8000562:	e9c0 3300 	strd	r3, r3, [r0]
 8000566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800056a:	6083      	str	r3, [r0, #8]
 800056c:	8181      	strh	r1, [r0, #12]
 800056e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000570:	81c2      	strh	r2, [r0, #14]
 8000572:	6183      	str	r3, [r0, #24]
 8000574:	4619      	mov	r1, r3
 8000576:	2208      	movs	r2, #8
 8000578:	305c      	adds	r0, #92	@ 0x5c
 800057a:	f000 f8c3 	bl	8000704 <memset>
 800057e:	4b0d      	ldr	r3, [pc, #52]	@ (80005b4 <std+0x58>)
 8000580:	6263      	str	r3, [r4, #36]	@ 0x24
 8000582:	4b0d      	ldr	r3, [pc, #52]	@ (80005b8 <std+0x5c>)
 8000584:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000586:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <std+0x60>)
 8000588:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <std+0x64>)
 800058c:	6323      	str	r3, [r4, #48]	@ 0x30
 800058e:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <std+0x68>)
 8000590:	6224      	str	r4, [r4, #32]
 8000592:	429c      	cmp	r4, r3
 8000594:	d006      	beq.n	80005a4 <std+0x48>
 8000596:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800059a:	4294      	cmp	r4, r2
 800059c:	d002      	beq.n	80005a4 <std+0x48>
 800059e:	33d0      	adds	r3, #208	@ 0xd0
 80005a0:	429c      	cmp	r4, r3
 80005a2:	d105      	bne.n	80005b0 <std+0x54>
 80005a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80005a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005ac:	f000 b8dc 	b.w	8000768 <__retarget_lock_init_recursive>
 80005b0:	bd10      	pop	{r4, pc}
 80005b2:	bf00      	nop
 80005b4:	08000fc1 	.word	0x08000fc1
 80005b8:	08000fe3 	.word	0x08000fe3
 80005bc:	0800101b 	.word	0x0800101b
 80005c0:	0800103f 	.word	0x0800103f
 80005c4:	2000007c 	.word	0x2000007c

080005c8 <stdio_exit_handler>:
 80005c8:	4a02      	ldr	r2, [pc, #8]	@ (80005d4 <stdio_exit_handler+0xc>)
 80005ca:	4903      	ldr	r1, [pc, #12]	@ (80005d8 <stdio_exit_handler+0x10>)
 80005cc:	4803      	ldr	r0, [pc, #12]	@ (80005dc <stdio_exit_handler+0x14>)
 80005ce:	f000 b869 	b.w	80006a4 <_fwalk_sglue>
 80005d2:	bf00      	nop
 80005d4:	20000000 	.word	0x20000000
 80005d8:	08000f59 	.word	0x08000f59
 80005dc:	20000010 	.word	0x20000010

080005e0 <cleanup_stdio>:
 80005e0:	6841      	ldr	r1, [r0, #4]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <cleanup_stdio+0x34>)
 80005e4:	4299      	cmp	r1, r3
 80005e6:	b510      	push	{r4, lr}
 80005e8:	4604      	mov	r4, r0
 80005ea:	d001      	beq.n	80005f0 <cleanup_stdio+0x10>
 80005ec:	f000 fcb4 	bl	8000f58 <_fflush_r>
 80005f0:	68a1      	ldr	r1, [r4, #8]
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <cleanup_stdio+0x38>)
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d002      	beq.n	80005fe <cleanup_stdio+0x1e>
 80005f8:	4620      	mov	r0, r4
 80005fa:	f000 fcad 	bl	8000f58 <_fflush_r>
 80005fe:	68e1      	ldr	r1, [r4, #12]
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <cleanup_stdio+0x3c>)
 8000602:	4299      	cmp	r1, r3
 8000604:	d004      	beq.n	8000610 <cleanup_stdio+0x30>
 8000606:	4620      	mov	r0, r4
 8000608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800060c:	f000 bca4 	b.w	8000f58 <_fflush_r>
 8000610:	bd10      	pop	{r4, pc}
 8000612:	bf00      	nop
 8000614:	2000007c 	.word	0x2000007c
 8000618:	200000e4 	.word	0x200000e4
 800061c:	2000014c 	.word	0x2000014c

08000620 <global_stdio_init.part.0>:
 8000620:	b510      	push	{r4, lr}
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <global_stdio_init.part.0+0x30>)
 8000624:	4c0b      	ldr	r4, [pc, #44]	@ (8000654 <global_stdio_init.part.0+0x34>)
 8000626:	4a0c      	ldr	r2, [pc, #48]	@ (8000658 <global_stdio_init.part.0+0x38>)
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	4620      	mov	r0, r4
 800062c:	2200      	movs	r2, #0
 800062e:	2104      	movs	r1, #4
 8000630:	f7ff ff94 	bl	800055c <std>
 8000634:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000638:	2201      	movs	r2, #1
 800063a:	2109      	movs	r1, #9
 800063c:	f7ff ff8e 	bl	800055c <std>
 8000640:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000644:	2202      	movs	r2, #2
 8000646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800064a:	2112      	movs	r1, #18
 800064c:	f7ff bf86 	b.w	800055c <std>
 8000650:	200001b4 	.word	0x200001b4
 8000654:	2000007c 	.word	0x2000007c
 8000658:	080005c9 	.word	0x080005c9

0800065c <__sfp_lock_acquire>:
 800065c:	4801      	ldr	r0, [pc, #4]	@ (8000664 <__sfp_lock_acquire+0x8>)
 800065e:	f000 b884 	b.w	800076a <__retarget_lock_acquire_recursive>
 8000662:	bf00      	nop
 8000664:	200001b9 	.word	0x200001b9

08000668 <__sfp_lock_release>:
 8000668:	4801      	ldr	r0, [pc, #4]	@ (8000670 <__sfp_lock_release+0x8>)
 800066a:	f000 b87f 	b.w	800076c <__retarget_lock_release_recursive>
 800066e:	bf00      	nop
 8000670:	200001b9 	.word	0x200001b9

08000674 <__sinit>:
 8000674:	b510      	push	{r4, lr}
 8000676:	4604      	mov	r4, r0
 8000678:	f7ff fff0 	bl	800065c <__sfp_lock_acquire>
 800067c:	6a23      	ldr	r3, [r4, #32]
 800067e:	b11b      	cbz	r3, 8000688 <__sinit+0x14>
 8000680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000684:	f7ff bff0 	b.w	8000668 <__sfp_lock_release>
 8000688:	4b04      	ldr	r3, [pc, #16]	@ (800069c <__sinit+0x28>)
 800068a:	6223      	str	r3, [r4, #32]
 800068c:	4b04      	ldr	r3, [pc, #16]	@ (80006a0 <__sinit+0x2c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1f5      	bne.n	8000680 <__sinit+0xc>
 8000694:	f7ff ffc4 	bl	8000620 <global_stdio_init.part.0>
 8000698:	e7f2      	b.n	8000680 <__sinit+0xc>
 800069a:	bf00      	nop
 800069c:	080005e1 	.word	0x080005e1
 80006a0:	200001b4 	.word	0x200001b4

080006a4 <_fwalk_sglue>:
 80006a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006a8:	4607      	mov	r7, r0
 80006aa:	4688      	mov	r8, r1
 80006ac:	4614      	mov	r4, r2
 80006ae:	2600      	movs	r6, #0
 80006b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006b4:	f1b9 0901 	subs.w	r9, r9, #1
 80006b8:	d505      	bpl.n	80006c6 <_fwalk_sglue+0x22>
 80006ba:	6824      	ldr	r4, [r4, #0]
 80006bc:	2c00      	cmp	r4, #0
 80006be:	d1f7      	bne.n	80006b0 <_fwalk_sglue+0xc>
 80006c0:	4630      	mov	r0, r6
 80006c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006c6:	89ab      	ldrh	r3, [r5, #12]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d907      	bls.n	80006dc <_fwalk_sglue+0x38>
 80006cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006d0:	3301      	adds	r3, #1
 80006d2:	d003      	beq.n	80006dc <_fwalk_sglue+0x38>
 80006d4:	4629      	mov	r1, r5
 80006d6:	4638      	mov	r0, r7
 80006d8:	47c0      	blx	r8
 80006da:	4306      	orrs	r6, r0
 80006dc:	3568      	adds	r5, #104	@ 0x68
 80006de:	e7e9      	b.n	80006b4 <_fwalk_sglue+0x10>

080006e0 <iprintf>:
 80006e0:	b40f      	push	{r0, r1, r2, r3}
 80006e2:	b507      	push	{r0, r1, r2, lr}
 80006e4:	4906      	ldr	r1, [pc, #24]	@ (8000700 <iprintf+0x20>)
 80006e6:	ab04      	add	r3, sp, #16
 80006e8:	6808      	ldr	r0, [r1, #0]
 80006ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80006ee:	6881      	ldr	r1, [r0, #8]
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	f000 f865 	bl	80007c0 <_vfiprintf_r>
 80006f6:	b003      	add	sp, #12
 80006f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80006fc:	b004      	add	sp, #16
 80006fe:	4770      	bx	lr
 8000700:	2000000c 	.word	0x2000000c

08000704 <memset>:
 8000704:	4402      	add	r2, r0
 8000706:	4603      	mov	r3, r0
 8000708:	4293      	cmp	r3, r2
 800070a:	d100      	bne.n	800070e <memset+0xa>
 800070c:	4770      	bx	lr
 800070e:	f803 1b01 	strb.w	r1, [r3], #1
 8000712:	e7f9      	b.n	8000708 <memset+0x4>

08000714 <__errno>:
 8000714:	4b01      	ldr	r3, [pc, #4]	@ (800071c <__errno+0x8>)
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	2000000c 	.word	0x2000000c

08000720 <__libc_init_array>:
 8000720:	b570      	push	{r4, r5, r6, lr}
 8000722:	4d0d      	ldr	r5, [pc, #52]	@ (8000758 <__libc_init_array+0x38>)
 8000724:	4c0d      	ldr	r4, [pc, #52]	@ (800075c <__libc_init_array+0x3c>)
 8000726:	1b64      	subs	r4, r4, r5
 8000728:	10a4      	asrs	r4, r4, #2
 800072a:	2600      	movs	r6, #0
 800072c:	42a6      	cmp	r6, r4
 800072e:	d109      	bne.n	8000744 <__libc_init_array+0x24>
 8000730:	4d0b      	ldr	r5, [pc, #44]	@ (8000760 <__libc_init_array+0x40>)
 8000732:	4c0c      	ldr	r4, [pc, #48]	@ (8000764 <__libc_init_array+0x44>)
 8000734:	f000 fe40 	bl	80013b8 <_init>
 8000738:	1b64      	subs	r4, r4, r5
 800073a:	10a4      	asrs	r4, r4, #2
 800073c:	2600      	movs	r6, #0
 800073e:	42a6      	cmp	r6, r4
 8000740:	d105      	bne.n	800074e <__libc_init_array+0x2e>
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f855 3b04 	ldr.w	r3, [r5], #4
 8000748:	4798      	blx	r3
 800074a:	3601      	adds	r6, #1
 800074c:	e7ee      	b.n	800072c <__libc_init_array+0xc>
 800074e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000752:	4798      	blx	r3
 8000754:	3601      	adds	r6, #1
 8000756:	e7f2      	b.n	800073e <__libc_init_array+0x1e>
 8000758:	0800142c 	.word	0x0800142c
 800075c:	0800142c 	.word	0x0800142c
 8000760:	0800142c 	.word	0x0800142c
 8000764:	08001430 	.word	0x08001430

08000768 <__retarget_lock_init_recursive>:
 8000768:	4770      	bx	lr

0800076a <__retarget_lock_acquire_recursive>:
 800076a:	4770      	bx	lr

0800076c <__retarget_lock_release_recursive>:
 800076c:	4770      	bx	lr

0800076e <__sfputc_r>:
 800076e:	6893      	ldr	r3, [r2, #8]
 8000770:	3b01      	subs	r3, #1
 8000772:	2b00      	cmp	r3, #0
 8000774:	b410      	push	{r4}
 8000776:	6093      	str	r3, [r2, #8]
 8000778:	da08      	bge.n	800078c <__sfputc_r+0x1e>
 800077a:	6994      	ldr	r4, [r2, #24]
 800077c:	42a3      	cmp	r3, r4
 800077e:	db01      	blt.n	8000784 <__sfputc_r+0x16>
 8000780:	290a      	cmp	r1, #10
 8000782:	d103      	bne.n	800078c <__sfputc_r+0x1e>
 8000784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000788:	f000 bc5d 	b.w	8001046 <__swbuf_r>
 800078c:	6813      	ldr	r3, [r2, #0]
 800078e:	1c58      	adds	r0, r3, #1
 8000790:	6010      	str	r0, [r2, #0]
 8000792:	7019      	strb	r1, [r3, #0]
 8000794:	4608      	mov	r0, r1
 8000796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800079a:	4770      	bx	lr

0800079c <__sfputs_r>:
 800079c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079e:	4606      	mov	r6, r0
 80007a0:	460f      	mov	r7, r1
 80007a2:	4614      	mov	r4, r2
 80007a4:	18d5      	adds	r5, r2, r3
 80007a6:	42ac      	cmp	r4, r5
 80007a8:	d101      	bne.n	80007ae <__sfputs_r+0x12>
 80007aa:	2000      	movs	r0, #0
 80007ac:	e007      	b.n	80007be <__sfputs_r+0x22>
 80007ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80007b2:	463a      	mov	r2, r7
 80007b4:	4630      	mov	r0, r6
 80007b6:	f7ff ffda 	bl	800076e <__sfputc_r>
 80007ba:	1c43      	adds	r3, r0, #1
 80007bc:	d1f3      	bne.n	80007a6 <__sfputs_r+0xa>
 80007be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080007c0 <_vfiprintf_r>:
 80007c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007c4:	460d      	mov	r5, r1
 80007c6:	b09d      	sub	sp, #116	@ 0x74
 80007c8:	4614      	mov	r4, r2
 80007ca:	4698      	mov	r8, r3
 80007cc:	4606      	mov	r6, r0
 80007ce:	b118      	cbz	r0, 80007d8 <_vfiprintf_r+0x18>
 80007d0:	6a03      	ldr	r3, [r0, #32]
 80007d2:	b90b      	cbnz	r3, 80007d8 <_vfiprintf_r+0x18>
 80007d4:	f7ff ff4e 	bl	8000674 <__sinit>
 80007d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80007da:	07d9      	lsls	r1, r3, #31
 80007dc:	d405      	bmi.n	80007ea <_vfiprintf_r+0x2a>
 80007de:	89ab      	ldrh	r3, [r5, #12]
 80007e0:	059a      	lsls	r2, r3, #22
 80007e2:	d402      	bmi.n	80007ea <_vfiprintf_r+0x2a>
 80007e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80007e6:	f7ff ffc0 	bl	800076a <__retarget_lock_acquire_recursive>
 80007ea:	89ab      	ldrh	r3, [r5, #12]
 80007ec:	071b      	lsls	r3, r3, #28
 80007ee:	d501      	bpl.n	80007f4 <_vfiprintf_r+0x34>
 80007f0:	692b      	ldr	r3, [r5, #16]
 80007f2:	b99b      	cbnz	r3, 800081c <_vfiprintf_r+0x5c>
 80007f4:	4629      	mov	r1, r5
 80007f6:	4630      	mov	r0, r6
 80007f8:	f000 fc64 	bl	80010c4 <__swsetup_r>
 80007fc:	b170      	cbz	r0, 800081c <_vfiprintf_r+0x5c>
 80007fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000800:	07dc      	lsls	r4, r3, #31
 8000802:	d504      	bpl.n	800080e <_vfiprintf_r+0x4e>
 8000804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000808:	b01d      	add	sp, #116	@ 0x74
 800080a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800080e:	89ab      	ldrh	r3, [r5, #12]
 8000810:	0598      	lsls	r0, r3, #22
 8000812:	d4f7      	bmi.n	8000804 <_vfiprintf_r+0x44>
 8000814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000816:	f7ff ffa9 	bl	800076c <__retarget_lock_release_recursive>
 800081a:	e7f3      	b.n	8000804 <_vfiprintf_r+0x44>
 800081c:	2300      	movs	r3, #0
 800081e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000820:	2320      	movs	r3, #32
 8000822:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000826:	f8cd 800c 	str.w	r8, [sp, #12]
 800082a:	2330      	movs	r3, #48	@ 0x30
 800082c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80009dc <_vfiprintf_r+0x21c>
 8000830:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000834:	f04f 0901 	mov.w	r9, #1
 8000838:	4623      	mov	r3, r4
 800083a:	469a      	mov	sl, r3
 800083c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000840:	b10a      	cbz	r2, 8000846 <_vfiprintf_r+0x86>
 8000842:	2a25      	cmp	r2, #37	@ 0x25
 8000844:	d1f9      	bne.n	800083a <_vfiprintf_r+0x7a>
 8000846:	ebba 0b04 	subs.w	fp, sl, r4
 800084a:	d00b      	beq.n	8000864 <_vfiprintf_r+0xa4>
 800084c:	465b      	mov	r3, fp
 800084e:	4622      	mov	r2, r4
 8000850:	4629      	mov	r1, r5
 8000852:	4630      	mov	r0, r6
 8000854:	f7ff ffa2 	bl	800079c <__sfputs_r>
 8000858:	3001      	adds	r0, #1
 800085a:	f000 80a7 	beq.w	80009ac <_vfiprintf_r+0x1ec>
 800085e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000860:	445a      	add	r2, fp
 8000862:	9209      	str	r2, [sp, #36]	@ 0x24
 8000864:	f89a 3000 	ldrb.w	r3, [sl]
 8000868:	2b00      	cmp	r3, #0
 800086a:	f000 809f 	beq.w	80009ac <_vfiprintf_r+0x1ec>
 800086e:	2300      	movs	r3, #0
 8000870:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000878:	f10a 0a01 	add.w	sl, sl, #1
 800087c:	9304      	str	r3, [sp, #16]
 800087e:	9307      	str	r3, [sp, #28]
 8000880:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000884:	931a      	str	r3, [sp, #104]	@ 0x68
 8000886:	4654      	mov	r4, sl
 8000888:	2205      	movs	r2, #5
 800088a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800088e:	4853      	ldr	r0, [pc, #332]	@ (80009dc <_vfiprintf_r+0x21c>)
 8000890:	f7ff fca6 	bl	80001e0 <memchr>
 8000894:	9a04      	ldr	r2, [sp, #16]
 8000896:	b9d8      	cbnz	r0, 80008d0 <_vfiprintf_r+0x110>
 8000898:	06d1      	lsls	r1, r2, #27
 800089a:	bf44      	itt	mi
 800089c:	2320      	movmi	r3, #32
 800089e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80008a2:	0713      	lsls	r3, r2, #28
 80008a4:	bf44      	itt	mi
 80008a6:	232b      	movmi	r3, #43	@ 0x2b
 80008a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80008ac:	f89a 3000 	ldrb.w	r3, [sl]
 80008b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80008b2:	d015      	beq.n	80008e0 <_vfiprintf_r+0x120>
 80008b4:	9a07      	ldr	r2, [sp, #28]
 80008b6:	4654      	mov	r4, sl
 80008b8:	2000      	movs	r0, #0
 80008ba:	f04f 0c0a 	mov.w	ip, #10
 80008be:	4621      	mov	r1, r4
 80008c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80008c4:	3b30      	subs	r3, #48	@ 0x30
 80008c6:	2b09      	cmp	r3, #9
 80008c8:	d94b      	bls.n	8000962 <_vfiprintf_r+0x1a2>
 80008ca:	b1b0      	cbz	r0, 80008fa <_vfiprintf_r+0x13a>
 80008cc:	9207      	str	r2, [sp, #28]
 80008ce:	e014      	b.n	80008fa <_vfiprintf_r+0x13a>
 80008d0:	eba0 0308 	sub.w	r3, r0, r8
 80008d4:	fa09 f303 	lsl.w	r3, r9, r3
 80008d8:	4313      	orrs	r3, r2
 80008da:	9304      	str	r3, [sp, #16]
 80008dc:	46a2      	mov	sl, r4
 80008de:	e7d2      	b.n	8000886 <_vfiprintf_r+0xc6>
 80008e0:	9b03      	ldr	r3, [sp, #12]
 80008e2:	1d19      	adds	r1, r3, #4
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	9103      	str	r1, [sp, #12]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	bfbb      	ittet	lt
 80008ec:	425b      	neglt	r3, r3
 80008ee:	f042 0202 	orrlt.w	r2, r2, #2
 80008f2:	9307      	strge	r3, [sp, #28]
 80008f4:	9307      	strlt	r3, [sp, #28]
 80008f6:	bfb8      	it	lt
 80008f8:	9204      	strlt	r2, [sp, #16]
 80008fa:	7823      	ldrb	r3, [r4, #0]
 80008fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80008fe:	d10a      	bne.n	8000916 <_vfiprintf_r+0x156>
 8000900:	7863      	ldrb	r3, [r4, #1]
 8000902:	2b2a      	cmp	r3, #42	@ 0x2a
 8000904:	d132      	bne.n	800096c <_vfiprintf_r+0x1ac>
 8000906:	9b03      	ldr	r3, [sp, #12]
 8000908:	1d1a      	adds	r2, r3, #4
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	9203      	str	r2, [sp, #12]
 800090e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000912:	3402      	adds	r4, #2
 8000914:	9305      	str	r3, [sp, #20]
 8000916:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80009ec <_vfiprintf_r+0x22c>
 800091a:	7821      	ldrb	r1, [r4, #0]
 800091c:	2203      	movs	r2, #3
 800091e:	4650      	mov	r0, sl
 8000920:	f7ff fc5e 	bl	80001e0 <memchr>
 8000924:	b138      	cbz	r0, 8000936 <_vfiprintf_r+0x176>
 8000926:	9b04      	ldr	r3, [sp, #16]
 8000928:	eba0 000a 	sub.w	r0, r0, sl
 800092c:	2240      	movs	r2, #64	@ 0x40
 800092e:	4082      	lsls	r2, r0
 8000930:	4313      	orrs	r3, r2
 8000932:	3401      	adds	r4, #1
 8000934:	9304      	str	r3, [sp, #16]
 8000936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800093a:	4829      	ldr	r0, [pc, #164]	@ (80009e0 <_vfiprintf_r+0x220>)
 800093c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000940:	2206      	movs	r2, #6
 8000942:	f7ff fc4d 	bl	80001e0 <memchr>
 8000946:	2800      	cmp	r0, #0
 8000948:	d03f      	beq.n	80009ca <_vfiprintf_r+0x20a>
 800094a:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <_vfiprintf_r+0x224>)
 800094c:	bb1b      	cbnz	r3, 8000996 <_vfiprintf_r+0x1d6>
 800094e:	9b03      	ldr	r3, [sp, #12]
 8000950:	3307      	adds	r3, #7
 8000952:	f023 0307 	bic.w	r3, r3, #7
 8000956:	3308      	adds	r3, #8
 8000958:	9303      	str	r3, [sp, #12]
 800095a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800095c:	443b      	add	r3, r7
 800095e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000960:	e76a      	b.n	8000838 <_vfiprintf_r+0x78>
 8000962:	fb0c 3202 	mla	r2, ip, r2, r3
 8000966:	460c      	mov	r4, r1
 8000968:	2001      	movs	r0, #1
 800096a:	e7a8      	b.n	80008be <_vfiprintf_r+0xfe>
 800096c:	2300      	movs	r3, #0
 800096e:	3401      	adds	r4, #1
 8000970:	9305      	str	r3, [sp, #20]
 8000972:	4619      	mov	r1, r3
 8000974:	f04f 0c0a 	mov.w	ip, #10
 8000978:	4620      	mov	r0, r4
 800097a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800097e:	3a30      	subs	r2, #48	@ 0x30
 8000980:	2a09      	cmp	r2, #9
 8000982:	d903      	bls.n	800098c <_vfiprintf_r+0x1cc>
 8000984:	2b00      	cmp	r3, #0
 8000986:	d0c6      	beq.n	8000916 <_vfiprintf_r+0x156>
 8000988:	9105      	str	r1, [sp, #20]
 800098a:	e7c4      	b.n	8000916 <_vfiprintf_r+0x156>
 800098c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000990:	4604      	mov	r4, r0
 8000992:	2301      	movs	r3, #1
 8000994:	e7f0      	b.n	8000978 <_vfiprintf_r+0x1b8>
 8000996:	ab03      	add	r3, sp, #12
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	462a      	mov	r2, r5
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <_vfiprintf_r+0x228>)
 800099e:	a904      	add	r1, sp, #16
 80009a0:	4630      	mov	r0, r6
 80009a2:	f3af 8000 	nop.w
 80009a6:	4607      	mov	r7, r0
 80009a8:	1c78      	adds	r0, r7, #1
 80009aa:	d1d6      	bne.n	800095a <_vfiprintf_r+0x19a>
 80009ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80009ae:	07d9      	lsls	r1, r3, #31
 80009b0:	d405      	bmi.n	80009be <_vfiprintf_r+0x1fe>
 80009b2:	89ab      	ldrh	r3, [r5, #12]
 80009b4:	059a      	lsls	r2, r3, #22
 80009b6:	d402      	bmi.n	80009be <_vfiprintf_r+0x1fe>
 80009b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80009ba:	f7ff fed7 	bl	800076c <__retarget_lock_release_recursive>
 80009be:	89ab      	ldrh	r3, [r5, #12]
 80009c0:	065b      	lsls	r3, r3, #25
 80009c2:	f53f af1f 	bmi.w	8000804 <_vfiprintf_r+0x44>
 80009c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80009c8:	e71e      	b.n	8000808 <_vfiprintf_r+0x48>
 80009ca:	ab03      	add	r3, sp, #12
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	462a      	mov	r2, r5
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <_vfiprintf_r+0x228>)
 80009d2:	a904      	add	r1, sp, #16
 80009d4:	4630      	mov	r0, r6
 80009d6:	f000 f91b 	bl	8000c10 <_printf_i>
 80009da:	e7e4      	b.n	80009a6 <_vfiprintf_r+0x1e6>
 80009dc:	080013ee 	.word	0x080013ee
 80009e0:	080013f8 	.word	0x080013f8
 80009e4:	00000000 	.word	0x00000000
 80009e8:	0800079d 	.word	0x0800079d
 80009ec:	080013f4 	.word	0x080013f4

080009f0 <sbrk_aligned>:
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	4e0f      	ldr	r6, [pc, #60]	@ (8000a30 <sbrk_aligned+0x40>)
 80009f4:	460c      	mov	r4, r1
 80009f6:	6831      	ldr	r1, [r6, #0]
 80009f8:	4605      	mov	r5, r0
 80009fa:	b911      	cbnz	r1, 8000a02 <sbrk_aligned+0x12>
 80009fc:	f000 fc70 	bl	80012e0 <_sbrk_r>
 8000a00:	6030      	str	r0, [r6, #0]
 8000a02:	4621      	mov	r1, r4
 8000a04:	4628      	mov	r0, r5
 8000a06:	f000 fc6b 	bl	80012e0 <_sbrk_r>
 8000a0a:	1c43      	adds	r3, r0, #1
 8000a0c:	d103      	bne.n	8000a16 <sbrk_aligned+0x26>
 8000a0e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000a12:	4620      	mov	r0, r4
 8000a14:	bd70      	pop	{r4, r5, r6, pc}
 8000a16:	1cc4      	adds	r4, r0, #3
 8000a18:	f024 0403 	bic.w	r4, r4, #3
 8000a1c:	42a0      	cmp	r0, r4
 8000a1e:	d0f8      	beq.n	8000a12 <sbrk_aligned+0x22>
 8000a20:	1a21      	subs	r1, r4, r0
 8000a22:	4628      	mov	r0, r5
 8000a24:	f000 fc5c 	bl	80012e0 <_sbrk_r>
 8000a28:	3001      	adds	r0, #1
 8000a2a:	d1f2      	bne.n	8000a12 <sbrk_aligned+0x22>
 8000a2c:	e7ef      	b.n	8000a0e <sbrk_aligned+0x1e>
 8000a2e:	bf00      	nop
 8000a30:	200001bc 	.word	0x200001bc

08000a34 <_malloc_r>:
 8000a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a38:	1ccd      	adds	r5, r1, #3
 8000a3a:	f025 0503 	bic.w	r5, r5, #3
 8000a3e:	3508      	adds	r5, #8
 8000a40:	2d0c      	cmp	r5, #12
 8000a42:	bf38      	it	cc
 8000a44:	250c      	movcc	r5, #12
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	4606      	mov	r6, r0
 8000a4a:	db01      	blt.n	8000a50 <_malloc_r+0x1c>
 8000a4c:	42a9      	cmp	r1, r5
 8000a4e:	d904      	bls.n	8000a5a <_malloc_r+0x26>
 8000a50:	230c      	movs	r3, #12
 8000a52:	6033      	str	r3, [r6, #0]
 8000a54:	2000      	movs	r0, #0
 8000a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b30 <_malloc_r+0xfc>
 8000a5e:	f000 faa3 	bl	8000fa8 <__malloc_lock>
 8000a62:	f8d8 3000 	ldr.w	r3, [r8]
 8000a66:	461c      	mov	r4, r3
 8000a68:	bb44      	cbnz	r4, 8000abc <_malloc_r+0x88>
 8000a6a:	4629      	mov	r1, r5
 8000a6c:	4630      	mov	r0, r6
 8000a6e:	f7ff ffbf 	bl	80009f0 <sbrk_aligned>
 8000a72:	1c43      	adds	r3, r0, #1
 8000a74:	4604      	mov	r4, r0
 8000a76:	d158      	bne.n	8000b2a <_malloc_r+0xf6>
 8000a78:	f8d8 4000 	ldr.w	r4, [r8]
 8000a7c:	4627      	mov	r7, r4
 8000a7e:	2f00      	cmp	r7, #0
 8000a80:	d143      	bne.n	8000b0a <_malloc_r+0xd6>
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	d04b      	beq.n	8000b1e <_malloc_r+0xea>
 8000a86:	6823      	ldr	r3, [r4, #0]
 8000a88:	4639      	mov	r1, r7
 8000a8a:	4630      	mov	r0, r6
 8000a8c:	eb04 0903 	add.w	r9, r4, r3
 8000a90:	f000 fc26 	bl	80012e0 <_sbrk_r>
 8000a94:	4581      	cmp	r9, r0
 8000a96:	d142      	bne.n	8000b1e <_malloc_r+0xea>
 8000a98:	6821      	ldr	r1, [r4, #0]
 8000a9a:	1a6d      	subs	r5, r5, r1
 8000a9c:	4629      	mov	r1, r5
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	f7ff ffa6 	bl	80009f0 <sbrk_aligned>
 8000aa4:	3001      	adds	r0, #1
 8000aa6:	d03a      	beq.n	8000b1e <_malloc_r+0xea>
 8000aa8:	6823      	ldr	r3, [r4, #0]
 8000aaa:	442b      	add	r3, r5
 8000aac:	6023      	str	r3, [r4, #0]
 8000aae:	f8d8 3000 	ldr.w	r3, [r8]
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	bb62      	cbnz	r2, 8000b10 <_malloc_r+0xdc>
 8000ab6:	f8c8 7000 	str.w	r7, [r8]
 8000aba:	e00f      	b.n	8000adc <_malloc_r+0xa8>
 8000abc:	6822      	ldr	r2, [r4, #0]
 8000abe:	1b52      	subs	r2, r2, r5
 8000ac0:	d420      	bmi.n	8000b04 <_malloc_r+0xd0>
 8000ac2:	2a0b      	cmp	r2, #11
 8000ac4:	d917      	bls.n	8000af6 <_malloc_r+0xc2>
 8000ac6:	1961      	adds	r1, r4, r5
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	6025      	str	r5, [r4, #0]
 8000acc:	bf18      	it	ne
 8000ace:	6059      	strne	r1, [r3, #4]
 8000ad0:	6863      	ldr	r3, [r4, #4]
 8000ad2:	bf08      	it	eq
 8000ad4:	f8c8 1000 	streq.w	r1, [r8]
 8000ad8:	5162      	str	r2, [r4, r5]
 8000ada:	604b      	str	r3, [r1, #4]
 8000adc:	4630      	mov	r0, r6
 8000ade:	f000 fa69 	bl	8000fb4 <__malloc_unlock>
 8000ae2:	f104 000b 	add.w	r0, r4, #11
 8000ae6:	1d23      	adds	r3, r4, #4
 8000ae8:	f020 0007 	bic.w	r0, r0, #7
 8000aec:	1ac2      	subs	r2, r0, r3
 8000aee:	bf1c      	itt	ne
 8000af0:	1a1b      	subne	r3, r3, r0
 8000af2:	50a3      	strne	r3, [r4, r2]
 8000af4:	e7af      	b.n	8000a56 <_malloc_r+0x22>
 8000af6:	6862      	ldr	r2, [r4, #4]
 8000af8:	42a3      	cmp	r3, r4
 8000afa:	bf0c      	ite	eq
 8000afc:	f8c8 2000 	streq.w	r2, [r8]
 8000b00:	605a      	strne	r2, [r3, #4]
 8000b02:	e7eb      	b.n	8000adc <_malloc_r+0xa8>
 8000b04:	4623      	mov	r3, r4
 8000b06:	6864      	ldr	r4, [r4, #4]
 8000b08:	e7ae      	b.n	8000a68 <_malloc_r+0x34>
 8000b0a:	463c      	mov	r4, r7
 8000b0c:	687f      	ldr	r7, [r7, #4]
 8000b0e:	e7b6      	b.n	8000a7e <_malloc_r+0x4a>
 8000b10:	461a      	mov	r2, r3
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	42a3      	cmp	r3, r4
 8000b16:	d1fb      	bne.n	8000b10 <_malloc_r+0xdc>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	6053      	str	r3, [r2, #4]
 8000b1c:	e7de      	b.n	8000adc <_malloc_r+0xa8>
 8000b1e:	230c      	movs	r3, #12
 8000b20:	6033      	str	r3, [r6, #0]
 8000b22:	4630      	mov	r0, r6
 8000b24:	f000 fa46 	bl	8000fb4 <__malloc_unlock>
 8000b28:	e794      	b.n	8000a54 <_malloc_r+0x20>
 8000b2a:	6005      	str	r5, [r0, #0]
 8000b2c:	e7d6      	b.n	8000adc <_malloc_r+0xa8>
 8000b2e:	bf00      	nop
 8000b30:	200001c0 	.word	0x200001c0

08000b34 <_printf_common>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	4616      	mov	r6, r2
 8000b3a:	4698      	mov	r8, r3
 8000b3c:	688a      	ldr	r2, [r1, #8]
 8000b3e:	690b      	ldr	r3, [r1, #16]
 8000b40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000b44:	4293      	cmp	r3, r2
 8000b46:	bfb8      	it	lt
 8000b48:	4613      	movlt	r3, r2
 8000b4a:	6033      	str	r3, [r6, #0]
 8000b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000b50:	4607      	mov	r7, r0
 8000b52:	460c      	mov	r4, r1
 8000b54:	b10a      	cbz	r2, 8000b5a <_printf_common+0x26>
 8000b56:	3301      	adds	r3, #1
 8000b58:	6033      	str	r3, [r6, #0]
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	0699      	lsls	r1, r3, #26
 8000b5e:	bf42      	ittt	mi
 8000b60:	6833      	ldrmi	r3, [r6, #0]
 8000b62:	3302      	addmi	r3, #2
 8000b64:	6033      	strmi	r3, [r6, #0]
 8000b66:	6825      	ldr	r5, [r4, #0]
 8000b68:	f015 0506 	ands.w	r5, r5, #6
 8000b6c:	d106      	bne.n	8000b7c <_printf_common+0x48>
 8000b6e:	f104 0a19 	add.w	sl, r4, #25
 8000b72:	68e3      	ldr	r3, [r4, #12]
 8000b74:	6832      	ldr	r2, [r6, #0]
 8000b76:	1a9b      	subs	r3, r3, r2
 8000b78:	42ab      	cmp	r3, r5
 8000b7a:	dc26      	bgt.n	8000bca <_printf_common+0x96>
 8000b7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000b80:	6822      	ldr	r2, [r4, #0]
 8000b82:	3b00      	subs	r3, #0
 8000b84:	bf18      	it	ne
 8000b86:	2301      	movne	r3, #1
 8000b88:	0692      	lsls	r2, r2, #26
 8000b8a:	d42b      	bmi.n	8000be4 <_printf_common+0xb0>
 8000b8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000b90:	4641      	mov	r1, r8
 8000b92:	4638      	mov	r0, r7
 8000b94:	47c8      	blx	r9
 8000b96:	3001      	adds	r0, #1
 8000b98:	d01e      	beq.n	8000bd8 <_printf_common+0xa4>
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	6922      	ldr	r2, [r4, #16]
 8000b9e:	f003 0306 	and.w	r3, r3, #6
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf02      	ittt	eq
 8000ba6:	68e5      	ldreq	r5, [r4, #12]
 8000ba8:	6833      	ldreq	r3, [r6, #0]
 8000baa:	1aed      	subeq	r5, r5, r3
 8000bac:	68a3      	ldr	r3, [r4, #8]
 8000bae:	bf0c      	ite	eq
 8000bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000bb4:	2500      	movne	r5, #0
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	bfc4      	itt	gt
 8000bba:	1a9b      	subgt	r3, r3, r2
 8000bbc:	18ed      	addgt	r5, r5, r3
 8000bbe:	2600      	movs	r6, #0
 8000bc0:	341a      	adds	r4, #26
 8000bc2:	42b5      	cmp	r5, r6
 8000bc4:	d11a      	bne.n	8000bfc <_printf_common+0xc8>
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	e008      	b.n	8000bdc <_printf_common+0xa8>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	4652      	mov	r2, sl
 8000bce:	4641      	mov	r1, r8
 8000bd0:	4638      	mov	r0, r7
 8000bd2:	47c8      	blx	r9
 8000bd4:	3001      	adds	r0, #1
 8000bd6:	d103      	bne.n	8000be0 <_printf_common+0xac>
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be0:	3501      	adds	r5, #1
 8000be2:	e7c6      	b.n	8000b72 <_printf_common+0x3e>
 8000be4:	18e1      	adds	r1, r4, r3
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	2030      	movs	r0, #48	@ 0x30
 8000bea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000bee:	4422      	add	r2, r4
 8000bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000bf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	e7c7      	b.n	8000b8c <_printf_common+0x58>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	4622      	mov	r2, r4
 8000c00:	4641      	mov	r1, r8
 8000c02:	4638      	mov	r0, r7
 8000c04:	47c8      	blx	r9
 8000c06:	3001      	adds	r0, #1
 8000c08:	d0e6      	beq.n	8000bd8 <_printf_common+0xa4>
 8000c0a:	3601      	adds	r6, #1
 8000c0c:	e7d9      	b.n	8000bc2 <_printf_common+0x8e>
	...

08000c10 <_printf_i>:
 8000c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	7e0f      	ldrb	r7, [r1, #24]
 8000c16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000c18:	2f78      	cmp	r7, #120	@ 0x78
 8000c1a:	4691      	mov	r9, r2
 8000c1c:	4680      	mov	r8, r0
 8000c1e:	460c      	mov	r4, r1
 8000c20:	469a      	mov	sl, r3
 8000c22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000c26:	d807      	bhi.n	8000c38 <_printf_i+0x28>
 8000c28:	2f62      	cmp	r7, #98	@ 0x62
 8000c2a:	d80a      	bhi.n	8000c42 <_printf_i+0x32>
 8000c2c:	2f00      	cmp	r7, #0
 8000c2e:	f000 80d2 	beq.w	8000dd6 <_printf_i+0x1c6>
 8000c32:	2f58      	cmp	r7, #88	@ 0x58
 8000c34:	f000 80b9 	beq.w	8000daa <_printf_i+0x19a>
 8000c38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000c3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000c40:	e03a      	b.n	8000cb8 <_printf_i+0xa8>
 8000c42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000c46:	2b15      	cmp	r3, #21
 8000c48:	d8f6      	bhi.n	8000c38 <_printf_i+0x28>
 8000c4a:	a101      	add	r1, pc, #4	@ (adr r1, 8000c50 <_printf_i+0x40>)
 8000c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c50:	08000ca9 	.word	0x08000ca9
 8000c54:	08000cbd 	.word	0x08000cbd
 8000c58:	08000c39 	.word	0x08000c39
 8000c5c:	08000c39 	.word	0x08000c39
 8000c60:	08000c39 	.word	0x08000c39
 8000c64:	08000c39 	.word	0x08000c39
 8000c68:	08000cbd 	.word	0x08000cbd
 8000c6c:	08000c39 	.word	0x08000c39
 8000c70:	08000c39 	.word	0x08000c39
 8000c74:	08000c39 	.word	0x08000c39
 8000c78:	08000c39 	.word	0x08000c39
 8000c7c:	08000dbd 	.word	0x08000dbd
 8000c80:	08000ce7 	.word	0x08000ce7
 8000c84:	08000d77 	.word	0x08000d77
 8000c88:	08000c39 	.word	0x08000c39
 8000c8c:	08000c39 	.word	0x08000c39
 8000c90:	08000ddf 	.word	0x08000ddf
 8000c94:	08000c39 	.word	0x08000c39
 8000c98:	08000ce7 	.word	0x08000ce7
 8000c9c:	08000c39 	.word	0x08000c39
 8000ca0:	08000c39 	.word	0x08000c39
 8000ca4:	08000d7f 	.word	0x08000d7f
 8000ca8:	6833      	ldr	r3, [r6, #0]
 8000caa:	1d1a      	adds	r2, r3, #4
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6032      	str	r2, [r6, #0]
 8000cb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000cb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e09d      	b.n	8000df8 <_printf_i+0x1e8>
 8000cbc:	6833      	ldr	r3, [r6, #0]
 8000cbe:	6820      	ldr	r0, [r4, #0]
 8000cc0:	1d19      	adds	r1, r3, #4
 8000cc2:	6031      	str	r1, [r6, #0]
 8000cc4:	0606      	lsls	r6, r0, #24
 8000cc6:	d501      	bpl.n	8000ccc <_printf_i+0xbc>
 8000cc8:	681d      	ldr	r5, [r3, #0]
 8000cca:	e003      	b.n	8000cd4 <_printf_i+0xc4>
 8000ccc:	0645      	lsls	r5, r0, #25
 8000cce:	d5fb      	bpl.n	8000cc8 <_printf_i+0xb8>
 8000cd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	da03      	bge.n	8000ce0 <_printf_i+0xd0>
 8000cd8:	232d      	movs	r3, #45	@ 0x2d
 8000cda:	426d      	negs	r5, r5
 8000cdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ce0:	4859      	ldr	r0, [pc, #356]	@ (8000e48 <_printf_i+0x238>)
 8000ce2:	230a      	movs	r3, #10
 8000ce4:	e011      	b.n	8000d0a <_printf_i+0xfa>
 8000ce6:	6821      	ldr	r1, [r4, #0]
 8000ce8:	6833      	ldr	r3, [r6, #0]
 8000cea:	0608      	lsls	r0, r1, #24
 8000cec:	f853 5b04 	ldr.w	r5, [r3], #4
 8000cf0:	d402      	bmi.n	8000cf8 <_printf_i+0xe8>
 8000cf2:	0649      	lsls	r1, r1, #25
 8000cf4:	bf48      	it	mi
 8000cf6:	b2ad      	uxthmi	r5, r5
 8000cf8:	2f6f      	cmp	r7, #111	@ 0x6f
 8000cfa:	4853      	ldr	r0, [pc, #332]	@ (8000e48 <_printf_i+0x238>)
 8000cfc:	6033      	str	r3, [r6, #0]
 8000cfe:	bf14      	ite	ne
 8000d00:	230a      	movne	r3, #10
 8000d02:	2308      	moveq	r3, #8
 8000d04:	2100      	movs	r1, #0
 8000d06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000d0a:	6866      	ldr	r6, [r4, #4]
 8000d0c:	60a6      	str	r6, [r4, #8]
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	bfa2      	ittt	ge
 8000d12:	6821      	ldrge	r1, [r4, #0]
 8000d14:	f021 0104 	bicge.w	r1, r1, #4
 8000d18:	6021      	strge	r1, [r4, #0]
 8000d1a:	b90d      	cbnz	r5, 8000d20 <_printf_i+0x110>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d04b      	beq.n	8000db8 <_printf_i+0x1a8>
 8000d20:	4616      	mov	r6, r2
 8000d22:	fbb5 f1f3 	udiv	r1, r5, r3
 8000d26:	fb03 5711 	mls	r7, r3, r1, r5
 8000d2a:	5dc7      	ldrb	r7, [r0, r7]
 8000d2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000d30:	462f      	mov	r7, r5
 8000d32:	42bb      	cmp	r3, r7
 8000d34:	460d      	mov	r5, r1
 8000d36:	d9f4      	bls.n	8000d22 <_printf_i+0x112>
 8000d38:	2b08      	cmp	r3, #8
 8000d3a:	d10b      	bne.n	8000d54 <_printf_i+0x144>
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	07df      	lsls	r7, r3, #31
 8000d40:	d508      	bpl.n	8000d54 <_printf_i+0x144>
 8000d42:	6923      	ldr	r3, [r4, #16]
 8000d44:	6861      	ldr	r1, [r4, #4]
 8000d46:	4299      	cmp	r1, r3
 8000d48:	bfde      	ittt	le
 8000d4a:	2330      	movle	r3, #48	@ 0x30
 8000d4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000d50:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000d54:	1b92      	subs	r2, r2, r6
 8000d56:	6122      	str	r2, [r4, #16]
 8000d58:	f8cd a000 	str.w	sl, [sp]
 8000d5c:	464b      	mov	r3, r9
 8000d5e:	aa03      	add	r2, sp, #12
 8000d60:	4621      	mov	r1, r4
 8000d62:	4640      	mov	r0, r8
 8000d64:	f7ff fee6 	bl	8000b34 <_printf_common>
 8000d68:	3001      	adds	r0, #1
 8000d6a:	d14a      	bne.n	8000e02 <_printf_i+0x1f2>
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d70:	b004      	add	sp, #16
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	f043 0320 	orr.w	r3, r3, #32
 8000d7c:	6023      	str	r3, [r4, #0]
 8000d7e:	4833      	ldr	r0, [pc, #204]	@ (8000e4c <_printf_i+0x23c>)
 8000d80:	2778      	movs	r7, #120	@ 0x78
 8000d82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	6831      	ldr	r1, [r6, #0]
 8000d8a:	061f      	lsls	r7, r3, #24
 8000d8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8000d90:	d402      	bmi.n	8000d98 <_printf_i+0x188>
 8000d92:	065f      	lsls	r7, r3, #25
 8000d94:	bf48      	it	mi
 8000d96:	b2ad      	uxthmi	r5, r5
 8000d98:	6031      	str	r1, [r6, #0]
 8000d9a:	07d9      	lsls	r1, r3, #31
 8000d9c:	bf44      	itt	mi
 8000d9e:	f043 0320 	orrmi.w	r3, r3, #32
 8000da2:	6023      	strmi	r3, [r4, #0]
 8000da4:	b11d      	cbz	r5, 8000dae <_printf_i+0x19e>
 8000da6:	2310      	movs	r3, #16
 8000da8:	e7ac      	b.n	8000d04 <_printf_i+0xf4>
 8000daa:	4827      	ldr	r0, [pc, #156]	@ (8000e48 <_printf_i+0x238>)
 8000dac:	e7e9      	b.n	8000d82 <_printf_i+0x172>
 8000dae:	6823      	ldr	r3, [r4, #0]
 8000db0:	f023 0320 	bic.w	r3, r3, #32
 8000db4:	6023      	str	r3, [r4, #0]
 8000db6:	e7f6      	b.n	8000da6 <_printf_i+0x196>
 8000db8:	4616      	mov	r6, r2
 8000dba:	e7bd      	b.n	8000d38 <_printf_i+0x128>
 8000dbc:	6833      	ldr	r3, [r6, #0]
 8000dbe:	6825      	ldr	r5, [r4, #0]
 8000dc0:	6961      	ldr	r1, [r4, #20]
 8000dc2:	1d18      	adds	r0, r3, #4
 8000dc4:	6030      	str	r0, [r6, #0]
 8000dc6:	062e      	lsls	r6, r5, #24
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	d501      	bpl.n	8000dd0 <_printf_i+0x1c0>
 8000dcc:	6019      	str	r1, [r3, #0]
 8000dce:	e002      	b.n	8000dd6 <_printf_i+0x1c6>
 8000dd0:	0668      	lsls	r0, r5, #25
 8000dd2:	d5fb      	bpl.n	8000dcc <_printf_i+0x1bc>
 8000dd4:	8019      	strh	r1, [r3, #0]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	6123      	str	r3, [r4, #16]
 8000dda:	4616      	mov	r6, r2
 8000ddc:	e7bc      	b.n	8000d58 <_printf_i+0x148>
 8000dde:	6833      	ldr	r3, [r6, #0]
 8000de0:	1d1a      	adds	r2, r3, #4
 8000de2:	6032      	str	r2, [r6, #0]
 8000de4:	681e      	ldr	r6, [r3, #0]
 8000de6:	6862      	ldr	r2, [r4, #4]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4630      	mov	r0, r6
 8000dec:	f7ff f9f8 	bl	80001e0 <memchr>
 8000df0:	b108      	cbz	r0, 8000df6 <_printf_i+0x1e6>
 8000df2:	1b80      	subs	r0, r0, r6
 8000df4:	6060      	str	r0, [r4, #4]
 8000df6:	6863      	ldr	r3, [r4, #4]
 8000df8:	6123      	str	r3, [r4, #16]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e00:	e7aa      	b.n	8000d58 <_printf_i+0x148>
 8000e02:	6923      	ldr	r3, [r4, #16]
 8000e04:	4632      	mov	r2, r6
 8000e06:	4649      	mov	r1, r9
 8000e08:	4640      	mov	r0, r8
 8000e0a:	47d0      	blx	sl
 8000e0c:	3001      	adds	r0, #1
 8000e0e:	d0ad      	beq.n	8000d6c <_printf_i+0x15c>
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	079b      	lsls	r3, r3, #30
 8000e14:	d413      	bmi.n	8000e3e <_printf_i+0x22e>
 8000e16:	68e0      	ldr	r0, [r4, #12]
 8000e18:	9b03      	ldr	r3, [sp, #12]
 8000e1a:	4298      	cmp	r0, r3
 8000e1c:	bfb8      	it	lt
 8000e1e:	4618      	movlt	r0, r3
 8000e20:	e7a6      	b.n	8000d70 <_printf_i+0x160>
 8000e22:	2301      	movs	r3, #1
 8000e24:	4632      	mov	r2, r6
 8000e26:	4649      	mov	r1, r9
 8000e28:	4640      	mov	r0, r8
 8000e2a:	47d0      	blx	sl
 8000e2c:	3001      	adds	r0, #1
 8000e2e:	d09d      	beq.n	8000d6c <_printf_i+0x15c>
 8000e30:	3501      	adds	r5, #1
 8000e32:	68e3      	ldr	r3, [r4, #12]
 8000e34:	9903      	ldr	r1, [sp, #12]
 8000e36:	1a5b      	subs	r3, r3, r1
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	dcf2      	bgt.n	8000e22 <_printf_i+0x212>
 8000e3c:	e7eb      	b.n	8000e16 <_printf_i+0x206>
 8000e3e:	2500      	movs	r5, #0
 8000e40:	f104 0619 	add.w	r6, r4, #25
 8000e44:	e7f5      	b.n	8000e32 <_printf_i+0x222>
 8000e46:	bf00      	nop
 8000e48:	080013ff 	.word	0x080013ff
 8000e4c:	08001410 	.word	0x08001410

08000e50 <__sflush_r>:
 8000e50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e58:	0716      	lsls	r6, r2, #28
 8000e5a:	4605      	mov	r5, r0
 8000e5c:	460c      	mov	r4, r1
 8000e5e:	d454      	bmi.n	8000f0a <__sflush_r+0xba>
 8000e60:	684b      	ldr	r3, [r1, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	dc02      	bgt.n	8000e6c <__sflush_r+0x1c>
 8000e66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	dd48      	ble.n	8000efe <__sflush_r+0xae>
 8000e6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000e6e:	2e00      	cmp	r6, #0
 8000e70:	d045      	beq.n	8000efe <__sflush_r+0xae>
 8000e72:	2300      	movs	r3, #0
 8000e74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000e78:	682f      	ldr	r7, [r5, #0]
 8000e7a:	6a21      	ldr	r1, [r4, #32]
 8000e7c:	602b      	str	r3, [r5, #0]
 8000e7e:	d030      	beq.n	8000ee2 <__sflush_r+0x92>
 8000e80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000e82:	89a3      	ldrh	r3, [r4, #12]
 8000e84:	0759      	lsls	r1, r3, #29
 8000e86:	d505      	bpl.n	8000e94 <__sflush_r+0x44>
 8000e88:	6863      	ldr	r3, [r4, #4]
 8000e8a:	1ad2      	subs	r2, r2, r3
 8000e8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000e8e:	b10b      	cbz	r3, 8000e94 <__sflush_r+0x44>
 8000e90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e92:	1ad2      	subs	r2, r2, r3
 8000e94:	2300      	movs	r3, #0
 8000e96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000e98:	6a21      	ldr	r1, [r4, #32]
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	47b0      	blx	r6
 8000e9e:	1c43      	adds	r3, r0, #1
 8000ea0:	89a3      	ldrh	r3, [r4, #12]
 8000ea2:	d106      	bne.n	8000eb2 <__sflush_r+0x62>
 8000ea4:	6829      	ldr	r1, [r5, #0]
 8000ea6:	291d      	cmp	r1, #29
 8000ea8:	d82b      	bhi.n	8000f02 <__sflush_r+0xb2>
 8000eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8000f54 <__sflush_r+0x104>)
 8000eac:	410a      	asrs	r2, r1
 8000eae:	07d6      	lsls	r6, r2, #31
 8000eb0:	d427      	bmi.n	8000f02 <__sflush_r+0xb2>
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	6062      	str	r2, [r4, #4]
 8000eb6:	04d9      	lsls	r1, r3, #19
 8000eb8:	6922      	ldr	r2, [r4, #16]
 8000eba:	6022      	str	r2, [r4, #0]
 8000ebc:	d504      	bpl.n	8000ec8 <__sflush_r+0x78>
 8000ebe:	1c42      	adds	r2, r0, #1
 8000ec0:	d101      	bne.n	8000ec6 <__sflush_r+0x76>
 8000ec2:	682b      	ldr	r3, [r5, #0]
 8000ec4:	b903      	cbnz	r3, 8000ec8 <__sflush_r+0x78>
 8000ec6:	6560      	str	r0, [r4, #84]	@ 0x54
 8000ec8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000eca:	602f      	str	r7, [r5, #0]
 8000ecc:	b1b9      	cbz	r1, 8000efe <__sflush_r+0xae>
 8000ece:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000ed2:	4299      	cmp	r1, r3
 8000ed4:	d002      	beq.n	8000edc <__sflush_r+0x8c>
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	f000 fa24 	bl	8001324 <_free_r>
 8000edc:	2300      	movs	r3, #0
 8000ede:	6363      	str	r3, [r4, #52]	@ 0x34
 8000ee0:	e00d      	b.n	8000efe <__sflush_r+0xae>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	47b0      	blx	r6
 8000ee8:	4602      	mov	r2, r0
 8000eea:	1c50      	adds	r0, r2, #1
 8000eec:	d1c9      	bne.n	8000e82 <__sflush_r+0x32>
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0c6      	beq.n	8000e82 <__sflush_r+0x32>
 8000ef4:	2b1d      	cmp	r3, #29
 8000ef6:	d001      	beq.n	8000efc <__sflush_r+0xac>
 8000ef8:	2b16      	cmp	r3, #22
 8000efa:	d11e      	bne.n	8000f3a <__sflush_r+0xea>
 8000efc:	602f      	str	r7, [r5, #0]
 8000efe:	2000      	movs	r0, #0
 8000f00:	e022      	b.n	8000f48 <__sflush_r+0xf8>
 8000f02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	e01b      	b.n	8000f42 <__sflush_r+0xf2>
 8000f0a:	690f      	ldr	r7, [r1, #16]
 8000f0c:	2f00      	cmp	r7, #0
 8000f0e:	d0f6      	beq.n	8000efe <__sflush_r+0xae>
 8000f10:	0793      	lsls	r3, r2, #30
 8000f12:	680e      	ldr	r6, [r1, #0]
 8000f14:	bf08      	it	eq
 8000f16:	694b      	ldreq	r3, [r1, #20]
 8000f18:	600f      	str	r7, [r1, #0]
 8000f1a:	bf18      	it	ne
 8000f1c:	2300      	movne	r3, #0
 8000f1e:	eba6 0807 	sub.w	r8, r6, r7
 8000f22:	608b      	str	r3, [r1, #8]
 8000f24:	f1b8 0f00 	cmp.w	r8, #0
 8000f28:	dde9      	ble.n	8000efe <__sflush_r+0xae>
 8000f2a:	6a21      	ldr	r1, [r4, #32]
 8000f2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000f2e:	4643      	mov	r3, r8
 8000f30:	463a      	mov	r2, r7
 8000f32:	4628      	mov	r0, r5
 8000f34:	47b0      	blx	r6
 8000f36:	2800      	cmp	r0, #0
 8000f38:	dc08      	bgt.n	8000f4c <__sflush_r+0xfc>
 8000f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f42:	81a3      	strh	r3, [r4, #12]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f4c:	4407      	add	r7, r0
 8000f4e:	eba8 0800 	sub.w	r8, r8, r0
 8000f52:	e7e7      	b.n	8000f24 <__sflush_r+0xd4>
 8000f54:	dfbffffe 	.word	0xdfbffffe

08000f58 <_fflush_r>:
 8000f58:	b538      	push	{r3, r4, r5, lr}
 8000f5a:	690b      	ldr	r3, [r1, #16]
 8000f5c:	4605      	mov	r5, r0
 8000f5e:	460c      	mov	r4, r1
 8000f60:	b913      	cbnz	r3, 8000f68 <_fflush_r+0x10>
 8000f62:	2500      	movs	r5, #0
 8000f64:	4628      	mov	r0, r5
 8000f66:	bd38      	pop	{r3, r4, r5, pc}
 8000f68:	b118      	cbz	r0, 8000f72 <_fflush_r+0x1a>
 8000f6a:	6a03      	ldr	r3, [r0, #32]
 8000f6c:	b90b      	cbnz	r3, 8000f72 <_fflush_r+0x1a>
 8000f6e:	f7ff fb81 	bl	8000674 <__sinit>
 8000f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f3      	beq.n	8000f62 <_fflush_r+0xa>
 8000f7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000f7c:	07d0      	lsls	r0, r2, #31
 8000f7e:	d404      	bmi.n	8000f8a <_fflush_r+0x32>
 8000f80:	0599      	lsls	r1, r3, #22
 8000f82:	d402      	bmi.n	8000f8a <_fflush_r+0x32>
 8000f84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000f86:	f7ff fbf0 	bl	800076a <__retarget_lock_acquire_recursive>
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	f7ff ff5f 	bl	8000e50 <__sflush_r>
 8000f92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000f94:	07da      	lsls	r2, r3, #31
 8000f96:	4605      	mov	r5, r0
 8000f98:	d4e4      	bmi.n	8000f64 <_fflush_r+0xc>
 8000f9a:	89a3      	ldrh	r3, [r4, #12]
 8000f9c:	059b      	lsls	r3, r3, #22
 8000f9e:	d4e1      	bmi.n	8000f64 <_fflush_r+0xc>
 8000fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000fa2:	f7ff fbe3 	bl	800076c <__retarget_lock_release_recursive>
 8000fa6:	e7dd      	b.n	8000f64 <_fflush_r+0xc>

08000fa8 <__malloc_lock>:
 8000fa8:	4801      	ldr	r0, [pc, #4]	@ (8000fb0 <__malloc_lock+0x8>)
 8000faa:	f7ff bbde 	b.w	800076a <__retarget_lock_acquire_recursive>
 8000fae:	bf00      	nop
 8000fb0:	200001b8 	.word	0x200001b8

08000fb4 <__malloc_unlock>:
 8000fb4:	4801      	ldr	r0, [pc, #4]	@ (8000fbc <__malloc_unlock+0x8>)
 8000fb6:	f7ff bbd9 	b.w	800076c <__retarget_lock_release_recursive>
 8000fba:	bf00      	nop
 8000fbc:	200001b8 	.word	0x200001b8

08000fc0 <__sread>:
 8000fc0:	b510      	push	{r4, lr}
 8000fc2:	460c      	mov	r4, r1
 8000fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fc8:	f000 f978 	bl	80012bc <_read_r>
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	bfab      	itete	ge
 8000fd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8000fd4:	181b      	addge	r3, r3, r0
 8000fd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000fda:	bfac      	ite	ge
 8000fdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000fde:	81a3      	strhlt	r3, [r4, #12]
 8000fe0:	bd10      	pop	{r4, pc}

08000fe2 <__swrite>:
 8000fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe6:	461f      	mov	r7, r3
 8000fe8:	898b      	ldrh	r3, [r1, #12]
 8000fea:	05db      	lsls	r3, r3, #23
 8000fec:	4605      	mov	r5, r0
 8000fee:	460c      	mov	r4, r1
 8000ff0:	4616      	mov	r6, r2
 8000ff2:	d505      	bpl.n	8001000 <__swrite+0x1e>
 8000ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f000 f94c 	bl	8001298 <_lseek_r>
 8001000:	89a3      	ldrh	r3, [r4, #12]
 8001002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001006:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800100a:	81a3      	strh	r3, [r4, #12]
 800100c:	4632      	mov	r2, r6
 800100e:	463b      	mov	r3, r7
 8001010:	4628      	mov	r0, r5
 8001012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001016:	f000 b973 	b.w	8001300 <_write_r>

0800101a <__sseek>:
 800101a:	b510      	push	{r4, lr}
 800101c:	460c      	mov	r4, r1
 800101e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001022:	f000 f939 	bl	8001298 <_lseek_r>
 8001026:	1c43      	adds	r3, r0, #1
 8001028:	89a3      	ldrh	r3, [r4, #12]
 800102a:	bf15      	itete	ne
 800102c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800102e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001032:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001036:	81a3      	strheq	r3, [r4, #12]
 8001038:	bf18      	it	ne
 800103a:	81a3      	strhne	r3, [r4, #12]
 800103c:	bd10      	pop	{r4, pc}

0800103e <__sclose>:
 800103e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001042:	f000 b8f7 	b.w	8001234 <_close_r>

08001046 <__swbuf_r>:
 8001046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001048:	460e      	mov	r6, r1
 800104a:	4614      	mov	r4, r2
 800104c:	4605      	mov	r5, r0
 800104e:	b118      	cbz	r0, 8001058 <__swbuf_r+0x12>
 8001050:	6a03      	ldr	r3, [r0, #32]
 8001052:	b90b      	cbnz	r3, 8001058 <__swbuf_r+0x12>
 8001054:	f7ff fb0e 	bl	8000674 <__sinit>
 8001058:	69a3      	ldr	r3, [r4, #24]
 800105a:	60a3      	str	r3, [r4, #8]
 800105c:	89a3      	ldrh	r3, [r4, #12]
 800105e:	071a      	lsls	r2, r3, #28
 8001060:	d501      	bpl.n	8001066 <__swbuf_r+0x20>
 8001062:	6923      	ldr	r3, [r4, #16]
 8001064:	b943      	cbnz	r3, 8001078 <__swbuf_r+0x32>
 8001066:	4621      	mov	r1, r4
 8001068:	4628      	mov	r0, r5
 800106a:	f000 f82b 	bl	80010c4 <__swsetup_r>
 800106e:	b118      	cbz	r0, 8001078 <__swbuf_r+0x32>
 8001070:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001074:	4638      	mov	r0, r7
 8001076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001078:	6823      	ldr	r3, [r4, #0]
 800107a:	6922      	ldr	r2, [r4, #16]
 800107c:	1a98      	subs	r0, r3, r2
 800107e:	6963      	ldr	r3, [r4, #20]
 8001080:	b2f6      	uxtb	r6, r6
 8001082:	4283      	cmp	r3, r0
 8001084:	4637      	mov	r7, r6
 8001086:	dc05      	bgt.n	8001094 <__swbuf_r+0x4e>
 8001088:	4621      	mov	r1, r4
 800108a:	4628      	mov	r0, r5
 800108c:	f7ff ff64 	bl	8000f58 <_fflush_r>
 8001090:	2800      	cmp	r0, #0
 8001092:	d1ed      	bne.n	8001070 <__swbuf_r+0x2a>
 8001094:	68a3      	ldr	r3, [r4, #8]
 8001096:	3b01      	subs	r3, #1
 8001098:	60a3      	str	r3, [r4, #8]
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	6022      	str	r2, [r4, #0]
 80010a0:	701e      	strb	r6, [r3, #0]
 80010a2:	6962      	ldr	r2, [r4, #20]
 80010a4:	1c43      	adds	r3, r0, #1
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d004      	beq.n	80010b4 <__swbuf_r+0x6e>
 80010aa:	89a3      	ldrh	r3, [r4, #12]
 80010ac:	07db      	lsls	r3, r3, #31
 80010ae:	d5e1      	bpl.n	8001074 <__swbuf_r+0x2e>
 80010b0:	2e0a      	cmp	r6, #10
 80010b2:	d1df      	bne.n	8001074 <__swbuf_r+0x2e>
 80010b4:	4621      	mov	r1, r4
 80010b6:	4628      	mov	r0, r5
 80010b8:	f7ff ff4e 	bl	8000f58 <_fflush_r>
 80010bc:	2800      	cmp	r0, #0
 80010be:	d0d9      	beq.n	8001074 <__swbuf_r+0x2e>
 80010c0:	e7d6      	b.n	8001070 <__swbuf_r+0x2a>
	...

080010c4 <__swsetup_r>:
 80010c4:	b538      	push	{r3, r4, r5, lr}
 80010c6:	4b29      	ldr	r3, [pc, #164]	@ (800116c <__swsetup_r+0xa8>)
 80010c8:	4605      	mov	r5, r0
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	460c      	mov	r4, r1
 80010ce:	b118      	cbz	r0, 80010d8 <__swsetup_r+0x14>
 80010d0:	6a03      	ldr	r3, [r0, #32]
 80010d2:	b90b      	cbnz	r3, 80010d8 <__swsetup_r+0x14>
 80010d4:	f7ff face 	bl	8000674 <__sinit>
 80010d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010dc:	0719      	lsls	r1, r3, #28
 80010de:	d422      	bmi.n	8001126 <__swsetup_r+0x62>
 80010e0:	06da      	lsls	r2, r3, #27
 80010e2:	d407      	bmi.n	80010f4 <__swsetup_r+0x30>
 80010e4:	2209      	movs	r2, #9
 80010e6:	602a      	str	r2, [r5, #0]
 80010e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ec:	81a3      	strh	r3, [r4, #12]
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010f2:	e033      	b.n	800115c <__swsetup_r+0x98>
 80010f4:	0758      	lsls	r0, r3, #29
 80010f6:	d512      	bpl.n	800111e <__swsetup_r+0x5a>
 80010f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010fa:	b141      	cbz	r1, 800110e <__swsetup_r+0x4a>
 80010fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001100:	4299      	cmp	r1, r3
 8001102:	d002      	beq.n	800110a <__swsetup_r+0x46>
 8001104:	4628      	mov	r0, r5
 8001106:	f000 f90d 	bl	8001324 <_free_r>
 800110a:	2300      	movs	r3, #0
 800110c:	6363      	str	r3, [r4, #52]	@ 0x34
 800110e:	89a3      	ldrh	r3, [r4, #12]
 8001110:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001114:	81a3      	strh	r3, [r4, #12]
 8001116:	2300      	movs	r3, #0
 8001118:	6063      	str	r3, [r4, #4]
 800111a:	6923      	ldr	r3, [r4, #16]
 800111c:	6023      	str	r3, [r4, #0]
 800111e:	89a3      	ldrh	r3, [r4, #12]
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	81a3      	strh	r3, [r4, #12]
 8001126:	6923      	ldr	r3, [r4, #16]
 8001128:	b94b      	cbnz	r3, 800113e <__swsetup_r+0x7a>
 800112a:	89a3      	ldrh	r3, [r4, #12]
 800112c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001134:	d003      	beq.n	800113e <__swsetup_r+0x7a>
 8001136:	4621      	mov	r1, r4
 8001138:	4628      	mov	r0, r5
 800113a:	f000 f83f 	bl	80011bc <__smakebuf_r>
 800113e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001142:	f013 0201 	ands.w	r2, r3, #1
 8001146:	d00a      	beq.n	800115e <__swsetup_r+0x9a>
 8001148:	2200      	movs	r2, #0
 800114a:	60a2      	str	r2, [r4, #8]
 800114c:	6962      	ldr	r2, [r4, #20]
 800114e:	4252      	negs	r2, r2
 8001150:	61a2      	str	r2, [r4, #24]
 8001152:	6922      	ldr	r2, [r4, #16]
 8001154:	b942      	cbnz	r2, 8001168 <__swsetup_r+0xa4>
 8001156:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800115a:	d1c5      	bne.n	80010e8 <__swsetup_r+0x24>
 800115c:	bd38      	pop	{r3, r4, r5, pc}
 800115e:	0799      	lsls	r1, r3, #30
 8001160:	bf58      	it	pl
 8001162:	6962      	ldrpl	r2, [r4, #20]
 8001164:	60a2      	str	r2, [r4, #8]
 8001166:	e7f4      	b.n	8001152 <__swsetup_r+0x8e>
 8001168:	2000      	movs	r0, #0
 800116a:	e7f7      	b.n	800115c <__swsetup_r+0x98>
 800116c:	2000000c 	.word	0x2000000c

08001170 <__swhatbuf_r>:
 8001170:	b570      	push	{r4, r5, r6, lr}
 8001172:	460c      	mov	r4, r1
 8001174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001178:	2900      	cmp	r1, #0
 800117a:	b096      	sub	sp, #88	@ 0x58
 800117c:	4615      	mov	r5, r2
 800117e:	461e      	mov	r6, r3
 8001180:	da0d      	bge.n	800119e <__swhatbuf_r+0x2e>
 8001182:	89a3      	ldrh	r3, [r4, #12]
 8001184:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001188:	f04f 0100 	mov.w	r1, #0
 800118c:	bf14      	ite	ne
 800118e:	2340      	movne	r3, #64	@ 0x40
 8001190:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001194:	2000      	movs	r0, #0
 8001196:	6031      	str	r1, [r6, #0]
 8001198:	602b      	str	r3, [r5, #0]
 800119a:	b016      	add	sp, #88	@ 0x58
 800119c:	bd70      	pop	{r4, r5, r6, pc}
 800119e:	466a      	mov	r2, sp
 80011a0:	f000 f858 	bl	8001254 <_fstat_r>
 80011a4:	2800      	cmp	r0, #0
 80011a6:	dbec      	blt.n	8001182 <__swhatbuf_r+0x12>
 80011a8:	9901      	ldr	r1, [sp, #4]
 80011aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80011ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80011b2:	4259      	negs	r1, r3
 80011b4:	4159      	adcs	r1, r3
 80011b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ba:	e7eb      	b.n	8001194 <__swhatbuf_r+0x24>

080011bc <__smakebuf_r>:
 80011bc:	898b      	ldrh	r3, [r1, #12]
 80011be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011c0:	079d      	lsls	r5, r3, #30
 80011c2:	4606      	mov	r6, r0
 80011c4:	460c      	mov	r4, r1
 80011c6:	d507      	bpl.n	80011d8 <__smakebuf_r+0x1c>
 80011c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80011cc:	6023      	str	r3, [r4, #0]
 80011ce:	6123      	str	r3, [r4, #16]
 80011d0:	2301      	movs	r3, #1
 80011d2:	6163      	str	r3, [r4, #20]
 80011d4:	b003      	add	sp, #12
 80011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d8:	ab01      	add	r3, sp, #4
 80011da:	466a      	mov	r2, sp
 80011dc:	f7ff ffc8 	bl	8001170 <__swhatbuf_r>
 80011e0:	9f00      	ldr	r7, [sp, #0]
 80011e2:	4605      	mov	r5, r0
 80011e4:	4639      	mov	r1, r7
 80011e6:	4630      	mov	r0, r6
 80011e8:	f7ff fc24 	bl	8000a34 <_malloc_r>
 80011ec:	b948      	cbnz	r0, 8001202 <__smakebuf_r+0x46>
 80011ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011f2:	059a      	lsls	r2, r3, #22
 80011f4:	d4ee      	bmi.n	80011d4 <__smakebuf_r+0x18>
 80011f6:	f023 0303 	bic.w	r3, r3, #3
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	81a3      	strh	r3, [r4, #12]
 8001200:	e7e2      	b.n	80011c8 <__smakebuf_r+0xc>
 8001202:	89a3      	ldrh	r3, [r4, #12]
 8001204:	6020      	str	r0, [r4, #0]
 8001206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800120a:	81a3      	strh	r3, [r4, #12]
 800120c:	9b01      	ldr	r3, [sp, #4]
 800120e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001212:	b15b      	cbz	r3, 800122c <__smakebuf_r+0x70>
 8001214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001218:	4630      	mov	r0, r6
 800121a:	f000 f82d 	bl	8001278 <_isatty_r>
 800121e:	b128      	cbz	r0, 800122c <__smakebuf_r+0x70>
 8001220:	89a3      	ldrh	r3, [r4, #12]
 8001222:	f023 0303 	bic.w	r3, r3, #3
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	81a3      	strh	r3, [r4, #12]
 800122c:	89a3      	ldrh	r3, [r4, #12]
 800122e:	431d      	orrs	r5, r3
 8001230:	81a5      	strh	r5, [r4, #12]
 8001232:	e7cf      	b.n	80011d4 <__smakebuf_r+0x18>

08001234 <_close_r>:
 8001234:	b538      	push	{r3, r4, r5, lr}
 8001236:	4d06      	ldr	r5, [pc, #24]	@ (8001250 <_close_r+0x1c>)
 8001238:	2300      	movs	r3, #0
 800123a:	4604      	mov	r4, r0
 800123c:	4608      	mov	r0, r1
 800123e:	602b      	str	r3, [r5, #0]
 8001240:	f7ff f861 	bl	8000306 <_close>
 8001244:	1c43      	adds	r3, r0, #1
 8001246:	d102      	bne.n	800124e <_close_r+0x1a>
 8001248:	682b      	ldr	r3, [r5, #0]
 800124a:	b103      	cbz	r3, 800124e <_close_r+0x1a>
 800124c:	6023      	str	r3, [r4, #0]
 800124e:	bd38      	pop	{r3, r4, r5, pc}
 8001250:	200001c4 	.word	0x200001c4

08001254 <_fstat_r>:
 8001254:	b538      	push	{r3, r4, r5, lr}
 8001256:	4d07      	ldr	r5, [pc, #28]	@ (8001274 <_fstat_r+0x20>)
 8001258:	2300      	movs	r3, #0
 800125a:	4604      	mov	r4, r0
 800125c:	4608      	mov	r0, r1
 800125e:	4611      	mov	r1, r2
 8001260:	602b      	str	r3, [r5, #0]
 8001262:	f7ff f85c 	bl	800031e <_fstat>
 8001266:	1c43      	adds	r3, r0, #1
 8001268:	d102      	bne.n	8001270 <_fstat_r+0x1c>
 800126a:	682b      	ldr	r3, [r5, #0]
 800126c:	b103      	cbz	r3, 8001270 <_fstat_r+0x1c>
 800126e:	6023      	str	r3, [r4, #0]
 8001270:	bd38      	pop	{r3, r4, r5, pc}
 8001272:	bf00      	nop
 8001274:	200001c4 	.word	0x200001c4

08001278 <_isatty_r>:
 8001278:	b538      	push	{r3, r4, r5, lr}
 800127a:	4d06      	ldr	r5, [pc, #24]	@ (8001294 <_isatty_r+0x1c>)
 800127c:	2300      	movs	r3, #0
 800127e:	4604      	mov	r4, r0
 8001280:	4608      	mov	r0, r1
 8001282:	602b      	str	r3, [r5, #0]
 8001284:	f7ff f85b 	bl	800033e <_isatty>
 8001288:	1c43      	adds	r3, r0, #1
 800128a:	d102      	bne.n	8001292 <_isatty_r+0x1a>
 800128c:	682b      	ldr	r3, [r5, #0]
 800128e:	b103      	cbz	r3, 8001292 <_isatty_r+0x1a>
 8001290:	6023      	str	r3, [r4, #0]
 8001292:	bd38      	pop	{r3, r4, r5, pc}
 8001294:	200001c4 	.word	0x200001c4

08001298 <_lseek_r>:
 8001298:	b538      	push	{r3, r4, r5, lr}
 800129a:	4d07      	ldr	r5, [pc, #28]	@ (80012b8 <_lseek_r+0x20>)
 800129c:	4604      	mov	r4, r0
 800129e:	4608      	mov	r0, r1
 80012a0:	4611      	mov	r1, r2
 80012a2:	2200      	movs	r2, #0
 80012a4:	602a      	str	r2, [r5, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	f7ff f854 	bl	8000354 <_lseek>
 80012ac:	1c43      	adds	r3, r0, #1
 80012ae:	d102      	bne.n	80012b6 <_lseek_r+0x1e>
 80012b0:	682b      	ldr	r3, [r5, #0]
 80012b2:	b103      	cbz	r3, 80012b6 <_lseek_r+0x1e>
 80012b4:	6023      	str	r3, [r4, #0]
 80012b6:	bd38      	pop	{r3, r4, r5, pc}
 80012b8:	200001c4 	.word	0x200001c4

080012bc <_read_r>:
 80012bc:	b538      	push	{r3, r4, r5, lr}
 80012be:	4d07      	ldr	r5, [pc, #28]	@ (80012dc <_read_r+0x20>)
 80012c0:	4604      	mov	r4, r0
 80012c2:	4608      	mov	r0, r1
 80012c4:	4611      	mov	r1, r2
 80012c6:	2200      	movs	r2, #0
 80012c8:	602a      	str	r2, [r5, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	f7fe ffe2 	bl	8000294 <_read>
 80012d0:	1c43      	adds	r3, r0, #1
 80012d2:	d102      	bne.n	80012da <_read_r+0x1e>
 80012d4:	682b      	ldr	r3, [r5, #0]
 80012d6:	b103      	cbz	r3, 80012da <_read_r+0x1e>
 80012d8:	6023      	str	r3, [r4, #0]
 80012da:	bd38      	pop	{r3, r4, r5, pc}
 80012dc:	200001c4 	.word	0x200001c4

080012e0 <_sbrk_r>:
 80012e0:	b538      	push	{r3, r4, r5, lr}
 80012e2:	4d06      	ldr	r5, [pc, #24]	@ (80012fc <_sbrk_r+0x1c>)
 80012e4:	2300      	movs	r3, #0
 80012e6:	4604      	mov	r4, r0
 80012e8:	4608      	mov	r0, r1
 80012ea:	602b      	str	r3, [r5, #0]
 80012ec:	f7ff f840 	bl	8000370 <_sbrk>
 80012f0:	1c43      	adds	r3, r0, #1
 80012f2:	d102      	bne.n	80012fa <_sbrk_r+0x1a>
 80012f4:	682b      	ldr	r3, [r5, #0]
 80012f6:	b103      	cbz	r3, 80012fa <_sbrk_r+0x1a>
 80012f8:	6023      	str	r3, [r4, #0]
 80012fa:	bd38      	pop	{r3, r4, r5, pc}
 80012fc:	200001c4 	.word	0x200001c4

08001300 <_write_r>:
 8001300:	b538      	push	{r3, r4, r5, lr}
 8001302:	4d07      	ldr	r5, [pc, #28]	@ (8001320 <_write_r+0x20>)
 8001304:	4604      	mov	r4, r0
 8001306:	4608      	mov	r0, r1
 8001308:	4611      	mov	r1, r2
 800130a:	2200      	movs	r2, #0
 800130c:	602a      	str	r2, [r5, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	f7fe ffdd 	bl	80002ce <_write>
 8001314:	1c43      	adds	r3, r0, #1
 8001316:	d102      	bne.n	800131e <_write_r+0x1e>
 8001318:	682b      	ldr	r3, [r5, #0]
 800131a:	b103      	cbz	r3, 800131e <_write_r+0x1e>
 800131c:	6023      	str	r3, [r4, #0]
 800131e:	bd38      	pop	{r3, r4, r5, pc}
 8001320:	200001c4 	.word	0x200001c4

08001324 <_free_r>:
 8001324:	b538      	push	{r3, r4, r5, lr}
 8001326:	4605      	mov	r5, r0
 8001328:	2900      	cmp	r1, #0
 800132a:	d041      	beq.n	80013b0 <_free_r+0x8c>
 800132c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001330:	1f0c      	subs	r4, r1, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	bfb8      	it	lt
 8001336:	18e4      	addlt	r4, r4, r3
 8001338:	f7ff fe36 	bl	8000fa8 <__malloc_lock>
 800133c:	4a1d      	ldr	r2, [pc, #116]	@ (80013b4 <_free_r+0x90>)
 800133e:	6813      	ldr	r3, [r2, #0]
 8001340:	b933      	cbnz	r3, 8001350 <_free_r+0x2c>
 8001342:	6063      	str	r3, [r4, #4]
 8001344:	6014      	str	r4, [r2, #0]
 8001346:	4628      	mov	r0, r5
 8001348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800134c:	f7ff be32 	b.w	8000fb4 <__malloc_unlock>
 8001350:	42a3      	cmp	r3, r4
 8001352:	d908      	bls.n	8001366 <_free_r+0x42>
 8001354:	6820      	ldr	r0, [r4, #0]
 8001356:	1821      	adds	r1, r4, r0
 8001358:	428b      	cmp	r3, r1
 800135a:	bf01      	itttt	eq
 800135c:	6819      	ldreq	r1, [r3, #0]
 800135e:	685b      	ldreq	r3, [r3, #4]
 8001360:	1809      	addeq	r1, r1, r0
 8001362:	6021      	streq	r1, [r4, #0]
 8001364:	e7ed      	b.n	8001342 <_free_r+0x1e>
 8001366:	461a      	mov	r2, r3
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	b10b      	cbz	r3, 8001370 <_free_r+0x4c>
 800136c:	42a3      	cmp	r3, r4
 800136e:	d9fa      	bls.n	8001366 <_free_r+0x42>
 8001370:	6811      	ldr	r1, [r2, #0]
 8001372:	1850      	adds	r0, r2, r1
 8001374:	42a0      	cmp	r0, r4
 8001376:	d10b      	bne.n	8001390 <_free_r+0x6c>
 8001378:	6820      	ldr	r0, [r4, #0]
 800137a:	4401      	add	r1, r0
 800137c:	1850      	adds	r0, r2, r1
 800137e:	4283      	cmp	r3, r0
 8001380:	6011      	str	r1, [r2, #0]
 8001382:	d1e0      	bne.n	8001346 <_free_r+0x22>
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	6053      	str	r3, [r2, #4]
 800138a:	4408      	add	r0, r1
 800138c:	6010      	str	r0, [r2, #0]
 800138e:	e7da      	b.n	8001346 <_free_r+0x22>
 8001390:	d902      	bls.n	8001398 <_free_r+0x74>
 8001392:	230c      	movs	r3, #12
 8001394:	602b      	str	r3, [r5, #0]
 8001396:	e7d6      	b.n	8001346 <_free_r+0x22>
 8001398:	6820      	ldr	r0, [r4, #0]
 800139a:	1821      	adds	r1, r4, r0
 800139c:	428b      	cmp	r3, r1
 800139e:	bf04      	itt	eq
 80013a0:	6819      	ldreq	r1, [r3, #0]
 80013a2:	685b      	ldreq	r3, [r3, #4]
 80013a4:	6063      	str	r3, [r4, #4]
 80013a6:	bf04      	itt	eq
 80013a8:	1809      	addeq	r1, r1, r0
 80013aa:	6021      	streq	r1, [r4, #0]
 80013ac:	6054      	str	r4, [r2, #4]
 80013ae:	e7ca      	b.n	8001346 <_free_r+0x22>
 80013b0:	bd38      	pop	{r3, r4, r5, pc}
 80013b2:	bf00      	nop
 80013b4:	200001c0 	.word	0x200001c0

080013b8 <_init>:
 80013b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ba:	bf00      	nop
 80013bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013be:	bc08      	pop	{r3}
 80013c0:	469e      	mov	lr, r3
 80013c2:	4770      	bx	lr

080013c4 <_fini>:
 80013c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c6:	bf00      	nop
 80013c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ca:	bc08      	pop	{r3}
 80013cc:	469e      	mov	lr, r3
 80013ce:	4770      	bx	lr
