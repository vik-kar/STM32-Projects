
10_adc_continuous_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000134c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080014ec  080014ec  000024ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001534  08001534  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001534  08001534  00002534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800153c  0800153c  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800153c  0800153c  0000253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001540  08001540  00002540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001544  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  080015a0  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080015a0  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000118b  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005f2  00000000  00000000  00004217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  00004810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000109  00000000  00000000  00004998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fbd8  00000000  00000000  00004aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002050  00000000  00000000  00014679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055b19  00000000  00000000  000166c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006c1e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c34  00000000  00000000  0006c228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0006ce5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080014d4 	.word	0x080014d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080014d4 	.word	0x080014d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <pa1_adc_init>:
#define CR2_SWSTART		(1U << 30)
#define SR_EOC			(1U << 1)
#define CR2_CONT		(1U << 1)


void pa1_adc_init(){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	/**  Configure the ADC GPIO pin **/
	/* Enable clock access to GPIOA */
	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <pa1_adc_init+0x58>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a13      	ldr	r2, [pc, #76]	@ (80002d8 <pa1_adc_init+0x58>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*  Set the mode of PA1 to analog mode (do this through the mode register */
	GPIOA->MODER |= (1U << 2);
 8000290:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <pa1_adc_init+0x5c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a11      	ldr	r2, [pc, #68]	@ (80002dc <pa1_adc_init+0x5c>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 3);
 800029c:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <pa1_adc_init+0x5c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <pa1_adc_init+0x5c>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6013      	str	r3, [r2, #0]

	/**  Configure the ADC module **/
	/* Enable clock access to the ADC module */
	RCC->APB2ENR |= ADC1EN;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <pa1_adc_init+0x58>)
 80002aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002ac:	4a0a      	ldr	r2, [pc, #40]	@ (80002d8 <pa1_adc_init+0x58>)
 80002ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002b2:	6453      	str	r3, [r2, #68]	@ 0x44

	/* Conversion sequence start - have to tell ADC module where conversion starts. Indicate what channel (ie conversion at channel 13, length 1). If we were using more channels, length would be longer*/

	ADC1->SQR3 = ADC_CH1;	//write a new value, do not set
 80002b4:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <pa1_adc_init+0x60>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	635a      	str	r2, [r3, #52]	@ 0x34


	/* Conversion sequence length */
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 80002ba:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <pa1_adc_init+0x60>)
 80002bc:	2200      	movs	r2, #0
 80002be:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Enable the ADC module */
	ADC1->CR2 |= CR2_ADON;
 80002c0:	4b07      	ldr	r3, [pc, #28]	@ (80002e0 <pa1_adc_init+0x60>)
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4a06      	ldr	r2, [pc, #24]	@ (80002e0 <pa1_adc_init+0x60>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6093      	str	r3, [r2, #8]

}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020000 	.word	0x40020000
 80002e0:	40012000 	.word	0x40012000

080002e4 <start_conversion>:

void start_conversion(void){
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	/** enable cont. conversion **/
	ADC1->CR2 |= CR2_CONT;
 80002e8:	4b08      	ldr	r3, [pc, #32]	@ (800030c <start_conversion+0x28>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a07      	ldr	r2, [pc, #28]	@ (800030c <start_conversion+0x28>)
 80002ee:	f043 0302 	orr.w	r3, r3, #2
 80002f2:	6093      	str	r3, [r2, #8]
	/*** Begin the ADC conversion ***/
	ADC1->CR2 |= CR2_SWSTART; //use or to not disturb the other bits
 80002f4:	4b05      	ldr	r3, [pc, #20]	@ (800030c <start_conversion+0x28>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a04      	ldr	r2, [pc, #16]	@ (800030c <start_conversion+0x28>)
 80002fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002fe:	6093      	str	r3, [r2, #8]
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40012000 	.word	0x40012000

08000310 <adc_read>:

/* return data that the ADC has converted */
uint32_t adc_read(void){
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	/* wait for conversion to be complete - check the status register flag*/

	while(!(ADC1->SR & SR_EOC)) {}//hold here
 8000314:	bf00      	nop
 8000316:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <adc_read+0x20>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f003 0302 	and.w	r3, r3, #2
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f9      	beq.n	8000316 <adc_read+0x6>

	/* read converted result */
	return (ADC1->DR); //return the data register
 8000322:	4b03      	ldr	r3, [pc, #12]	@ (8000330 <adc_read+0x20>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000326:	4618      	mov	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	40012000 	.word	0x40012000

08000334 <main>:
#include "uart.h"
#include "adc.h"

uint32_t sensor_value;

int main(void){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	//enable uart_tx to print the data
	uart2_rxtx_init();
 8000338:	f000 f8c6 	bl	80004c8 <uart2_rxtx_init>

	pa1_adc_init();
 800033c:	f7ff ffa0 	bl	8000280 <pa1_adc_init>

	start_conversion(); //this has now been removed outside the loop, since we have cont. conversion enabled.
 8000340:	f7ff ffd0 	bl	80002e4 <start_conversion>

	while(1){


		sensor_value = adc_read();
 8000344:	f7ff ffe4 	bl	8000310 <adc_read>
 8000348:	4603      	mov	r3, r0
 800034a:	4a05      	ldr	r2, [pc, #20]	@ (8000360 <main+0x2c>)
 800034c:	6013      	str	r3, [r2, #0]
		printf("Sensor value: %d \n\r", (int)sensor_value);
 800034e:	4b04      	ldr	r3, [pc, #16]	@ (8000360 <main+0x2c>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4619      	mov	r1, r3
 8000354:	4803      	ldr	r0, [pc, #12]	@ (8000364 <main+0x30>)
 8000356:	f000 fa51 	bl	80007fc <iprintf>
		sensor_value = adc_read();
 800035a:	bf00      	nop
 800035c:	e7f2      	b.n	8000344 <main+0x10>
 800035e:	bf00      	nop
 8000360:	20000078 	.word	0x20000078
 8000364:	080014ec 	.word	0x080014ec

08000368 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
 8000378:	e00a      	b.n	8000390 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800037a:	f3af 8000 	nop.w
 800037e:	4601      	mov	r1, r0
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	1c5a      	adds	r2, r3, #1
 8000384:	60ba      	str	r2, [r7, #8]
 8000386:	b2ca      	uxtb	r2, r1
 8000388:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	3301      	adds	r3, #1
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	697a      	ldr	r2, [r7, #20]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	429a      	cmp	r2, r3
 8000396:	dbf0      	blt.n	800037a <_read+0x12>
  }

  return len;
 8000398:	687b      	ldr	r3, [r7, #4]
}
 800039a:	4618      	mov	r0, r3
 800039c:	3718      	adds	r7, #24
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003a2:	b580      	push	{r7, lr}
 80003a4:	b086      	sub	sp, #24
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	60f8      	str	r0, [r7, #12]
 80003aa:	60b9      	str	r1, [r7, #8]
 80003ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	e009      	b.n	80003c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	1c5a      	adds	r2, r3, #1
 80003b8:	60ba      	str	r2, [r7, #8]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 f877 	bl	80004b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	3301      	adds	r3, #1
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	697a      	ldr	r2, [r7, #20]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	dbf1      	blt.n	80003b4 <_write+0x12>
  }
  return len;
 80003d0:	687b      	ldr	r3, [r7, #4]
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	3718      	adds	r7, #24
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <_close>:

int _close(int file)
{
 80003da:	b480      	push	{r7}
 80003dc:	b083      	sub	sp, #12
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003f2:	b480      	push	{r7}
 80003f4:	b083      	sub	sp, #12
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	6078      	str	r0, [r7, #4]
 80003fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000402:	605a      	str	r2, [r3, #4]
  return 0;
 8000404:	2300      	movs	r3, #0
}
 8000406:	4618      	mov	r0, r3
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr

08000412 <_isatty>:

int _isatty(int file)
{
 8000412:	b480      	push	{r7}
 8000414:	b083      	sub	sp, #12
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800041a:	2301      	movs	r3, #1
}
 800041c:	4618      	mov	r0, r3
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000434:	2300      	movs	r3, #0
}
 8000436:	4618      	mov	r0, r3
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
	...

08000444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800044c:	4a14      	ldr	r2, [pc, #80]	@ (80004a0 <_sbrk+0x5c>)
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <_sbrk+0x60>)
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d102      	bne.n	8000466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000460:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <_sbrk+0x64>)
 8000462:	4a12      	ldr	r2, [pc, #72]	@ (80004ac <_sbrk+0x68>)
 8000464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000466:	4b10      	ldr	r3, [pc, #64]	@ (80004a8 <_sbrk+0x64>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	693a      	ldr	r2, [r7, #16]
 8000470:	429a      	cmp	r2, r3
 8000472:	d207      	bcs.n	8000484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000474:	f000 f9dc 	bl	8000830 <__errno>
 8000478:	4603      	mov	r3, r0
 800047a:	220c      	movs	r2, #12
 800047c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800047e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000482:	e009      	b.n	8000498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000484:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <_sbrk+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800048a:	4b07      	ldr	r3, [pc, #28]	@ (80004a8 <_sbrk+0x64>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	4a05      	ldr	r2, [pc, #20]	@ (80004a8 <_sbrk+0x64>)
 8000494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3718      	adds	r7, #24
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20020000 	.word	0x20020000
 80004a4:	00000400 	.word	0x00000400
 80004a8:	2000007c 	.word	0x2000007c
 80004ac:	200001d0 	.word	0x200001d0

080004b0 <__io_putchar>:


void uart2_write(int ch);
int __io_putchar(int ch);

int __io_putchar(int ch){
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f000 f875 	bl	80005a8 <uart2_write>
	return ch;
 80004be:	687b      	ldr	r3, [r7, #4]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <uart2_rxtx_init>:
/* This function will now initialize the transmitter and the receiver
 * PA3 is the rx line of our UART2
 *
*/

void uart2_rxtx_init(void){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	/*******************************Configure uart gpio pin*******************************/

	/*Enable clock access to gpioa*/
	RCC->AHB1ENR |= GPIOAEN;
 80004cc:	4b32      	ldr	r3, [pc, #200]	@ (8000598 <uart2_rxtx_init+0xd0>)
 80004ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d0:	4a31      	ldr	r2, [pc, #196]	@ (8000598 <uart2_rxtx_init+0xd0>)
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	6313      	str	r3, [r2, #48]	@ 0x30
	 * We need to visit GPIO port mode register - this register is a 32 bit register that determines the function of each pin in a specific GPIO port (ex GPIOA, GPIOB)
	 * Through this register, we can configure each pin as GPI/O, AF mode or analog mode
	 * We want to set MODER2 (for pin 2). '10' is AF mode. Pin 2 occupies bit 4 (0) and bit 5 (1)
	 */

	GPIOA->MODER &=~(1U << 4); //bit 4 to 0
 80004d8:	4b30      	ldr	r3, [pc, #192]	@ (800059c <uart2_rxtx_init+0xd4>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a2f      	ldr	r2, [pc, #188]	@ (800059c <uart2_rxtx_init+0xd4>)
 80004de:	f023 0310 	bic.w	r3, r3, #16
 80004e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5); // bit 5 to 1
 80004e4:	4b2d      	ldr	r3, [pc, #180]	@ (800059c <uart2_rxtx_init+0xd4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a2c      	ldr	r2, [pc, #176]	@ (800059c <uart2_rxtx_init+0xd4>)
 80004ea:	f043 0320 	orr.w	r3, r3, #32
 80004ee:	6013      	str	r3, [r2, #0]

	/*set PA2 alternate function type to UART_TX (AF07)*/
	/*To access AFRL, we need to access element [0] of the AFR array*/
	GPIOA->AFR[0] |= 	(1U << 8);
 80004f0:	4b2a      	ldr	r3, [pc, #168]	@ (800059c <uart2_rxtx_init+0xd4>)
 80004f2:	6a1b      	ldr	r3, [r3, #32]
 80004f4:	4a29      	ldr	r2, [pc, #164]	@ (800059c <uart2_rxtx_init+0xd4>)
 80004f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 	(1U << 9);
 80004fc:	4b27      	ldr	r3, [pc, #156]	@ (800059c <uart2_rxtx_init+0xd4>)
 80004fe:	6a1b      	ldr	r3, [r3, #32]
 8000500:	4a26      	ldr	r2, [pc, #152]	@ (800059c <uart2_rxtx_init+0xd4>)
 8000502:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000506:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 	(1U << 10);
 8000508:	4b24      	ldr	r3, [pc, #144]	@ (800059c <uart2_rxtx_init+0xd4>)
 800050a:	6a1b      	ldr	r3, [r3, #32]
 800050c:	4a23      	ldr	r2, [pc, #140]	@ (800059c <uart2_rxtx_init+0xd4>)
 800050e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000512:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=   ~(1U << 11);
 8000514:	4b21      	ldr	r3, [pc, #132]	@ (800059c <uart2_rxtx_init+0xd4>)
 8000516:	6a1b      	ldr	r3, [r3, #32]
 8000518:	4a20      	ldr	r2, [pc, #128]	@ (800059c <uart2_rxtx_init+0xd4>)
 800051a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800051e:	6213      	str	r3, [r2, #32]

	/*NEW: set PA3 mode to alternate function mode*/
	/*NEW: set PA3 mode type to UART_RX - PA3 occupies MODER3 (bits 6 and 7). bit 6 = 0, bit 7 = 1*/
	GPIOA->MODER &=~ (1U << 6); //bit 6 to 0
 8000520:	4b1e      	ldr	r3, [pc, #120]	@ (800059c <uart2_rxtx_init+0xd4>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a1d      	ldr	r2, [pc, #116]	@ (800059c <uart2_rxtx_init+0xd4>)
 8000526:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800052a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U << 7); // bit 7 to 1
 800052c:	4b1b      	ldr	r3, [pc, #108]	@ (800059c <uart2_rxtx_init+0xd4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a1a      	ldr	r2, [pc, #104]	@ (800059c <uart2_rxtx_init+0xd4>)
 8000532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000536:	6013      	str	r3, [r2, #0]

	/*Next: set PA3 alternate function type to UART_RX (AF07) using GPIO[x]_AFRL ---> AFRL3*/
	/* AFRL3: bit 12, 13, 14, 15, 0111: AF7 */
	GPIOA->AFR[0] |= 	(1U << 12);
 8000538:	4b18      	ldr	r3, [pc, #96]	@ (800059c <uart2_rxtx_init+0xd4>)
 800053a:	6a1b      	ldr	r3, [r3, #32]
 800053c:	4a17      	ldr	r2, [pc, #92]	@ (800059c <uart2_rxtx_init+0xd4>)
 800053e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000542:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 	(1U << 13);
 8000544:	4b15      	ldr	r3, [pc, #84]	@ (800059c <uart2_rxtx_init+0xd4>)
 8000546:	6a1b      	ldr	r3, [r3, #32]
 8000548:	4a14      	ldr	r2, [pc, #80]	@ (800059c <uart2_rxtx_init+0xd4>)
 800054a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800054e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 	(1U << 14);
 8000550:	4b12      	ldr	r3, [pc, #72]	@ (800059c <uart2_rxtx_init+0xd4>)
 8000552:	6a1b      	ldr	r3, [r3, #32]
 8000554:	4a11      	ldr	r2, [pc, #68]	@ (800059c <uart2_rxtx_init+0xd4>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800055a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=   ~(1U << 15);
 800055c:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <uart2_rxtx_init+0xd4>)
 800055e:	6a1b      	ldr	r3, [r3, #32]
 8000560:	4a0e      	ldr	r2, [pc, #56]	@ (800059c <uart2_rxtx_init+0xd4>)
 8000562:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000566:	6213      	str	r3, [r2, #32]
	//DONE configuring pin 3 for UART_RX


	/*******************************Configure uart module*******************************/
	/*Enable clock access to UARt2 - remember, it is connected to the APB1 bus*/
	RCC->APB1ENR |= UART2EN;
 8000568:	4b0b      	ldr	r3, [pc, #44]	@ (8000598 <uart2_rxtx_init+0xd0>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	4a0a      	ldr	r2, [pc, #40]	@ (8000598 <uart2_rxtx_init+0xd0>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000572:	6413      	str	r3, [r2, #64]	@ 0x40
	 * why do we need a baud rate
	 * - it defines the speed of communication for the UART module - the baud rate sets how many bits are transmitted per second
	 *   over the UART connection
	 * - there is an equation to derive the baud rate, in a separate function
	 */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000574:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000578:	4909      	ldr	r1, [pc, #36]	@ (80005a0 <uart2_rxtx_init+0xd8>)
 800057a:	480a      	ldr	r0, [pc, #40]	@ (80005a4 <uart2_rxtx_init+0xdc>)
 800057c:	f000 f82c 	bl	80005d8 <uart_set_baudrate>
	 */

	/* We also need to configure the receiver transfer direction */
	/* in reference manual: go to control register 1: bit 2 = RE (receiver enable) */

	USART2->CR1 = (CR1_TE | CR1_RE); //transmitter enable
 8000580:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <uart2_rxtx_init+0xdc>)
 8000582:	220c      	movs	r2, #12
 8000584:	60da      	str	r2, [r3, #12]


	/*Enable the uart module*/
	//also needs control register 1. Bit 13 is UE (UART enable)
	//we are doing |= here because we have already configured the transmitter (TE) so we do not want to wipe that out
	USART2->CR1 |= CR1_UE;
 8000586:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <uart2_rxtx_init+0xdc>)
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	4a06      	ldr	r2, [pc, #24]	@ (80005a4 <uart2_rxtx_init+0xdc>)
 800058c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000590:	60d3      	str	r3, [r2, #12]

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40023800 	.word	0x40023800
 800059c:	40020000 	.word	0x40020000
 80005a0:	00f42400 	.word	0x00f42400
 80005a4:	40004400 	.word	0x40004400

080005a8 <uart2_write>:
	/*read data */
	return USART2->DR;

}

void uart2_write(int ch){
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	 * - we need to check the UART status register for this
	 */

	//in parenthesis below: This will return true if the 7th bit is set inside the UART status register (SR)

	while(!(USART2->SR & SR_TXE)){
 80005b0:	bf00      	nop
 80005b2:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <uart2_write+0x2c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0f9      	beq.n	80005b2 <uart2_write+0xa>
	//DR = data register
	/*
	 * & 0xFF operation ensures that only the lowest 8 bits (1 byte) of the value 'ch' are written to the data register
	 * UART transmission is typically byte-oriented, meaning only 8 bits can be transmitted at a time. (& 0xFF) masks out any higher-order bits that may exist
	 */
	USART2->DR = (ch & 0xFF); //transmit 8 bits
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a04      	ldr	r2, [pc, #16]	@ (80005d4 <uart2_write+0x2c>)
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	6053      	str	r3, [r2, #4]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40004400 	.word	0x40004400

080005d8 <uart_set_baudrate>:

//The first argument works with any UART module (UART1, UART2, etc)
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80005e4:	6879      	ldr	r1, [r7, #4]
 80005e6:	68b8      	ldr	r0, [r7, #8]
 80005e8:	f000 f808 	bl	80005fc <compute_uart_bd>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	609a      	str	r2, [r3, #8]
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
	//this returned value will be written into the UART baud rate register
	return ((PeriphClk + (BaudRate/2U)) / BaudRate);
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	085a      	lsrs	r2, r3, #1
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	441a      	add	r2, r3
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	fbb2 f3f3 	udiv	r3, r2, r3
 8000614:	b29b      	uxth	r3, r3
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000624:	480d      	ldr	r0, [pc, #52]	@ (800065c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000626:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000628:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800062c:	480c      	ldr	r0, [pc, #48]	@ (8000660 <LoopForever+0x6>)
  ldr r1, =_edata
 800062e:	490d      	ldr	r1, [pc, #52]	@ (8000664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000630:	4a0d      	ldr	r2, [pc, #52]	@ (8000668 <LoopForever+0xe>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000634:	e002      	b.n	800063c <LoopCopyDataInit>

08000636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063a:	3304      	adds	r3, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800063c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000640:	d3f9      	bcc.n	8000636 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000642:	4a0a      	ldr	r2, [pc, #40]	@ (800066c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000644:	4c0a      	ldr	r4, [pc, #40]	@ (8000670 <LoopForever+0x16>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000648:	e001      	b.n	800064e <LoopFillZerobss>

0800064a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800064c:	3204      	adds	r2, #4

0800064e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000650:	d3fb      	bcc.n	800064a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000652:	f000 f8f3 	bl	800083c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000656:	f7ff fe6d 	bl	8000334 <main>

0800065a <LoopForever>:

LoopForever:
  b LoopForever
 800065a:	e7fe      	b.n	800065a <LoopForever>
  ldr   r0, =_estack
 800065c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000664:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000668:	08001544 	.word	0x08001544
  ldr r2, =_sbss
 800066c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000670:	200001cc 	.word	0x200001cc

08000674 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC_IRQHandler>
	...

08000678 <std>:
 8000678:	2300      	movs	r3, #0
 800067a:	b510      	push	{r4, lr}
 800067c:	4604      	mov	r4, r0
 800067e:	e9c0 3300 	strd	r3, r3, [r0]
 8000682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000686:	6083      	str	r3, [r0, #8]
 8000688:	8181      	strh	r1, [r0, #12]
 800068a:	6643      	str	r3, [r0, #100]	@ 0x64
 800068c:	81c2      	strh	r2, [r0, #14]
 800068e:	6183      	str	r3, [r0, #24]
 8000690:	4619      	mov	r1, r3
 8000692:	2208      	movs	r2, #8
 8000694:	305c      	adds	r0, #92	@ 0x5c
 8000696:	f000 f8c3 	bl	8000820 <memset>
 800069a:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <std+0x58>)
 800069c:	6263      	str	r3, [r4, #36]	@ 0x24
 800069e:	4b0d      	ldr	r3, [pc, #52]	@ (80006d4 <std+0x5c>)
 80006a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006a2:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <std+0x60>)
 80006a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <std+0x64>)
 80006a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80006aa:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <std+0x68>)
 80006ac:	6224      	str	r4, [r4, #32]
 80006ae:	429c      	cmp	r4, r3
 80006b0:	d006      	beq.n	80006c0 <std+0x48>
 80006b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006b6:	4294      	cmp	r4, r2
 80006b8:	d002      	beq.n	80006c0 <std+0x48>
 80006ba:	33d0      	adds	r3, #208	@ 0xd0
 80006bc:	429c      	cmp	r4, r3
 80006be:	d105      	bne.n	80006cc <std+0x54>
 80006c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c8:	f000 b8dc 	b.w	8000884 <__retarget_lock_init_recursive>
 80006cc:	bd10      	pop	{r4, pc}
 80006ce:	bf00      	nop
 80006d0:	080010dd 	.word	0x080010dd
 80006d4:	080010ff 	.word	0x080010ff
 80006d8:	08001137 	.word	0x08001137
 80006dc:	0800115b 	.word	0x0800115b
 80006e0:	20000080 	.word	0x20000080

080006e4 <stdio_exit_handler>:
 80006e4:	4a02      	ldr	r2, [pc, #8]	@ (80006f0 <stdio_exit_handler+0xc>)
 80006e6:	4903      	ldr	r1, [pc, #12]	@ (80006f4 <stdio_exit_handler+0x10>)
 80006e8:	4803      	ldr	r0, [pc, #12]	@ (80006f8 <stdio_exit_handler+0x14>)
 80006ea:	f000 b869 	b.w	80007c0 <_fwalk_sglue>
 80006ee:	bf00      	nop
 80006f0:	20000000 	.word	0x20000000
 80006f4:	08001075 	.word	0x08001075
 80006f8:	20000010 	.word	0x20000010

080006fc <cleanup_stdio>:
 80006fc:	6841      	ldr	r1, [r0, #4]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <cleanup_stdio+0x34>)
 8000700:	4299      	cmp	r1, r3
 8000702:	b510      	push	{r4, lr}
 8000704:	4604      	mov	r4, r0
 8000706:	d001      	beq.n	800070c <cleanup_stdio+0x10>
 8000708:	f000 fcb4 	bl	8001074 <_fflush_r>
 800070c:	68a1      	ldr	r1, [r4, #8]
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <cleanup_stdio+0x38>)
 8000710:	4299      	cmp	r1, r3
 8000712:	d002      	beq.n	800071a <cleanup_stdio+0x1e>
 8000714:	4620      	mov	r0, r4
 8000716:	f000 fcad 	bl	8001074 <_fflush_r>
 800071a:	68e1      	ldr	r1, [r4, #12]
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <cleanup_stdio+0x3c>)
 800071e:	4299      	cmp	r1, r3
 8000720:	d004      	beq.n	800072c <cleanup_stdio+0x30>
 8000722:	4620      	mov	r0, r4
 8000724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000728:	f000 bca4 	b.w	8001074 <_fflush_r>
 800072c:	bd10      	pop	{r4, pc}
 800072e:	bf00      	nop
 8000730:	20000080 	.word	0x20000080
 8000734:	200000e8 	.word	0x200000e8
 8000738:	20000150 	.word	0x20000150

0800073c <global_stdio_init.part.0>:
 800073c:	b510      	push	{r4, lr}
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <global_stdio_init.part.0+0x30>)
 8000740:	4c0b      	ldr	r4, [pc, #44]	@ (8000770 <global_stdio_init.part.0+0x34>)
 8000742:	4a0c      	ldr	r2, [pc, #48]	@ (8000774 <global_stdio_init.part.0+0x38>)
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	4620      	mov	r0, r4
 8000748:	2200      	movs	r2, #0
 800074a:	2104      	movs	r1, #4
 800074c:	f7ff ff94 	bl	8000678 <std>
 8000750:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000754:	2201      	movs	r2, #1
 8000756:	2109      	movs	r1, #9
 8000758:	f7ff ff8e 	bl	8000678 <std>
 800075c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000760:	2202      	movs	r2, #2
 8000762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000766:	2112      	movs	r1, #18
 8000768:	f7ff bf86 	b.w	8000678 <std>
 800076c:	200001b8 	.word	0x200001b8
 8000770:	20000080 	.word	0x20000080
 8000774:	080006e5 	.word	0x080006e5

08000778 <__sfp_lock_acquire>:
 8000778:	4801      	ldr	r0, [pc, #4]	@ (8000780 <__sfp_lock_acquire+0x8>)
 800077a:	f000 b884 	b.w	8000886 <__retarget_lock_acquire_recursive>
 800077e:	bf00      	nop
 8000780:	200001bd 	.word	0x200001bd

08000784 <__sfp_lock_release>:
 8000784:	4801      	ldr	r0, [pc, #4]	@ (800078c <__sfp_lock_release+0x8>)
 8000786:	f000 b87f 	b.w	8000888 <__retarget_lock_release_recursive>
 800078a:	bf00      	nop
 800078c:	200001bd 	.word	0x200001bd

08000790 <__sinit>:
 8000790:	b510      	push	{r4, lr}
 8000792:	4604      	mov	r4, r0
 8000794:	f7ff fff0 	bl	8000778 <__sfp_lock_acquire>
 8000798:	6a23      	ldr	r3, [r4, #32]
 800079a:	b11b      	cbz	r3, 80007a4 <__sinit+0x14>
 800079c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007a0:	f7ff bff0 	b.w	8000784 <__sfp_lock_release>
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <__sinit+0x28>)
 80007a6:	6223      	str	r3, [r4, #32]
 80007a8:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <__sinit+0x2c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d1f5      	bne.n	800079c <__sinit+0xc>
 80007b0:	f7ff ffc4 	bl	800073c <global_stdio_init.part.0>
 80007b4:	e7f2      	b.n	800079c <__sinit+0xc>
 80007b6:	bf00      	nop
 80007b8:	080006fd 	.word	0x080006fd
 80007bc:	200001b8 	.word	0x200001b8

080007c0 <_fwalk_sglue>:
 80007c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007c4:	4607      	mov	r7, r0
 80007c6:	4688      	mov	r8, r1
 80007c8:	4614      	mov	r4, r2
 80007ca:	2600      	movs	r6, #0
 80007cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007d0:	f1b9 0901 	subs.w	r9, r9, #1
 80007d4:	d505      	bpl.n	80007e2 <_fwalk_sglue+0x22>
 80007d6:	6824      	ldr	r4, [r4, #0]
 80007d8:	2c00      	cmp	r4, #0
 80007da:	d1f7      	bne.n	80007cc <_fwalk_sglue+0xc>
 80007dc:	4630      	mov	r0, r6
 80007de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007e2:	89ab      	ldrh	r3, [r5, #12]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d907      	bls.n	80007f8 <_fwalk_sglue+0x38>
 80007e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007ec:	3301      	adds	r3, #1
 80007ee:	d003      	beq.n	80007f8 <_fwalk_sglue+0x38>
 80007f0:	4629      	mov	r1, r5
 80007f2:	4638      	mov	r0, r7
 80007f4:	47c0      	blx	r8
 80007f6:	4306      	orrs	r6, r0
 80007f8:	3568      	adds	r5, #104	@ 0x68
 80007fa:	e7e9      	b.n	80007d0 <_fwalk_sglue+0x10>

080007fc <iprintf>:
 80007fc:	b40f      	push	{r0, r1, r2, r3}
 80007fe:	b507      	push	{r0, r1, r2, lr}
 8000800:	4906      	ldr	r1, [pc, #24]	@ (800081c <iprintf+0x20>)
 8000802:	ab04      	add	r3, sp, #16
 8000804:	6808      	ldr	r0, [r1, #0]
 8000806:	f853 2b04 	ldr.w	r2, [r3], #4
 800080a:	6881      	ldr	r1, [r0, #8]
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	f000 f865 	bl	80008dc <_vfiprintf_r>
 8000812:	b003      	add	sp, #12
 8000814:	f85d eb04 	ldr.w	lr, [sp], #4
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr
 800081c:	2000000c 	.word	0x2000000c

08000820 <memset>:
 8000820:	4402      	add	r2, r0
 8000822:	4603      	mov	r3, r0
 8000824:	4293      	cmp	r3, r2
 8000826:	d100      	bne.n	800082a <memset+0xa>
 8000828:	4770      	bx	lr
 800082a:	f803 1b01 	strb.w	r1, [r3], #1
 800082e:	e7f9      	b.n	8000824 <memset+0x4>

08000830 <__errno>:
 8000830:	4b01      	ldr	r3, [pc, #4]	@ (8000838 <__errno+0x8>)
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	2000000c 	.word	0x2000000c

0800083c <__libc_init_array>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	4d0d      	ldr	r5, [pc, #52]	@ (8000874 <__libc_init_array+0x38>)
 8000840:	4c0d      	ldr	r4, [pc, #52]	@ (8000878 <__libc_init_array+0x3c>)
 8000842:	1b64      	subs	r4, r4, r5
 8000844:	10a4      	asrs	r4, r4, #2
 8000846:	2600      	movs	r6, #0
 8000848:	42a6      	cmp	r6, r4
 800084a:	d109      	bne.n	8000860 <__libc_init_array+0x24>
 800084c:	4d0b      	ldr	r5, [pc, #44]	@ (800087c <__libc_init_array+0x40>)
 800084e:	4c0c      	ldr	r4, [pc, #48]	@ (8000880 <__libc_init_array+0x44>)
 8000850:	f000 fe40 	bl	80014d4 <_init>
 8000854:	1b64      	subs	r4, r4, r5
 8000856:	10a4      	asrs	r4, r4, #2
 8000858:	2600      	movs	r6, #0
 800085a:	42a6      	cmp	r6, r4
 800085c:	d105      	bne.n	800086a <__libc_init_array+0x2e>
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f855 3b04 	ldr.w	r3, [r5], #4
 8000864:	4798      	blx	r3
 8000866:	3601      	adds	r6, #1
 8000868:	e7ee      	b.n	8000848 <__libc_init_array+0xc>
 800086a:	f855 3b04 	ldr.w	r3, [r5], #4
 800086e:	4798      	blx	r3
 8000870:	3601      	adds	r6, #1
 8000872:	e7f2      	b.n	800085a <__libc_init_array+0x1e>
 8000874:	0800153c 	.word	0x0800153c
 8000878:	0800153c 	.word	0x0800153c
 800087c:	0800153c 	.word	0x0800153c
 8000880:	08001540 	.word	0x08001540

08000884 <__retarget_lock_init_recursive>:
 8000884:	4770      	bx	lr

08000886 <__retarget_lock_acquire_recursive>:
 8000886:	4770      	bx	lr

08000888 <__retarget_lock_release_recursive>:
 8000888:	4770      	bx	lr

0800088a <__sfputc_r>:
 800088a:	6893      	ldr	r3, [r2, #8]
 800088c:	3b01      	subs	r3, #1
 800088e:	2b00      	cmp	r3, #0
 8000890:	b410      	push	{r4}
 8000892:	6093      	str	r3, [r2, #8]
 8000894:	da08      	bge.n	80008a8 <__sfputc_r+0x1e>
 8000896:	6994      	ldr	r4, [r2, #24]
 8000898:	42a3      	cmp	r3, r4
 800089a:	db01      	blt.n	80008a0 <__sfputc_r+0x16>
 800089c:	290a      	cmp	r1, #10
 800089e:	d103      	bne.n	80008a8 <__sfputc_r+0x1e>
 80008a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80008a4:	f000 bc5d 	b.w	8001162 <__swbuf_r>
 80008a8:	6813      	ldr	r3, [r2, #0]
 80008aa:	1c58      	adds	r0, r3, #1
 80008ac:	6010      	str	r0, [r2, #0]
 80008ae:	7019      	strb	r1, [r3, #0]
 80008b0:	4608      	mov	r0, r1
 80008b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <__sfputs_r>:
 80008b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ba:	4606      	mov	r6, r0
 80008bc:	460f      	mov	r7, r1
 80008be:	4614      	mov	r4, r2
 80008c0:	18d5      	adds	r5, r2, r3
 80008c2:	42ac      	cmp	r4, r5
 80008c4:	d101      	bne.n	80008ca <__sfputs_r+0x12>
 80008c6:	2000      	movs	r0, #0
 80008c8:	e007      	b.n	80008da <__sfputs_r+0x22>
 80008ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008ce:	463a      	mov	r2, r7
 80008d0:	4630      	mov	r0, r6
 80008d2:	f7ff ffda 	bl	800088a <__sfputc_r>
 80008d6:	1c43      	adds	r3, r0, #1
 80008d8:	d1f3      	bne.n	80008c2 <__sfputs_r+0xa>
 80008da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080008dc <_vfiprintf_r>:
 80008dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008e0:	460d      	mov	r5, r1
 80008e2:	b09d      	sub	sp, #116	@ 0x74
 80008e4:	4614      	mov	r4, r2
 80008e6:	4698      	mov	r8, r3
 80008e8:	4606      	mov	r6, r0
 80008ea:	b118      	cbz	r0, 80008f4 <_vfiprintf_r+0x18>
 80008ec:	6a03      	ldr	r3, [r0, #32]
 80008ee:	b90b      	cbnz	r3, 80008f4 <_vfiprintf_r+0x18>
 80008f0:	f7ff ff4e 	bl	8000790 <__sinit>
 80008f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80008f6:	07d9      	lsls	r1, r3, #31
 80008f8:	d405      	bmi.n	8000906 <_vfiprintf_r+0x2a>
 80008fa:	89ab      	ldrh	r3, [r5, #12]
 80008fc:	059a      	lsls	r2, r3, #22
 80008fe:	d402      	bmi.n	8000906 <_vfiprintf_r+0x2a>
 8000900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000902:	f7ff ffc0 	bl	8000886 <__retarget_lock_acquire_recursive>
 8000906:	89ab      	ldrh	r3, [r5, #12]
 8000908:	071b      	lsls	r3, r3, #28
 800090a:	d501      	bpl.n	8000910 <_vfiprintf_r+0x34>
 800090c:	692b      	ldr	r3, [r5, #16]
 800090e:	b99b      	cbnz	r3, 8000938 <_vfiprintf_r+0x5c>
 8000910:	4629      	mov	r1, r5
 8000912:	4630      	mov	r0, r6
 8000914:	f000 fc64 	bl	80011e0 <__swsetup_r>
 8000918:	b170      	cbz	r0, 8000938 <_vfiprintf_r+0x5c>
 800091a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800091c:	07dc      	lsls	r4, r3, #31
 800091e:	d504      	bpl.n	800092a <_vfiprintf_r+0x4e>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000924:	b01d      	add	sp, #116	@ 0x74
 8000926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800092a:	89ab      	ldrh	r3, [r5, #12]
 800092c:	0598      	lsls	r0, r3, #22
 800092e:	d4f7      	bmi.n	8000920 <_vfiprintf_r+0x44>
 8000930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000932:	f7ff ffa9 	bl	8000888 <__retarget_lock_release_recursive>
 8000936:	e7f3      	b.n	8000920 <_vfiprintf_r+0x44>
 8000938:	2300      	movs	r3, #0
 800093a:	9309      	str	r3, [sp, #36]	@ 0x24
 800093c:	2320      	movs	r3, #32
 800093e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000942:	f8cd 800c 	str.w	r8, [sp, #12]
 8000946:	2330      	movs	r3, #48	@ 0x30
 8000948:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000af8 <_vfiprintf_r+0x21c>
 800094c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000950:	f04f 0901 	mov.w	r9, #1
 8000954:	4623      	mov	r3, r4
 8000956:	469a      	mov	sl, r3
 8000958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800095c:	b10a      	cbz	r2, 8000962 <_vfiprintf_r+0x86>
 800095e:	2a25      	cmp	r2, #37	@ 0x25
 8000960:	d1f9      	bne.n	8000956 <_vfiprintf_r+0x7a>
 8000962:	ebba 0b04 	subs.w	fp, sl, r4
 8000966:	d00b      	beq.n	8000980 <_vfiprintf_r+0xa4>
 8000968:	465b      	mov	r3, fp
 800096a:	4622      	mov	r2, r4
 800096c:	4629      	mov	r1, r5
 800096e:	4630      	mov	r0, r6
 8000970:	f7ff ffa2 	bl	80008b8 <__sfputs_r>
 8000974:	3001      	adds	r0, #1
 8000976:	f000 80a7 	beq.w	8000ac8 <_vfiprintf_r+0x1ec>
 800097a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800097c:	445a      	add	r2, fp
 800097e:	9209      	str	r2, [sp, #36]	@ 0x24
 8000980:	f89a 3000 	ldrb.w	r3, [sl]
 8000984:	2b00      	cmp	r3, #0
 8000986:	f000 809f 	beq.w	8000ac8 <_vfiprintf_r+0x1ec>
 800098a:	2300      	movs	r3, #0
 800098c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000994:	f10a 0a01 	add.w	sl, sl, #1
 8000998:	9304      	str	r3, [sp, #16]
 800099a:	9307      	str	r3, [sp, #28]
 800099c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80009a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80009a2:	4654      	mov	r4, sl
 80009a4:	2205      	movs	r2, #5
 80009a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009aa:	4853      	ldr	r0, [pc, #332]	@ (8000af8 <_vfiprintf_r+0x21c>)
 80009ac:	f7ff fc18 	bl	80001e0 <memchr>
 80009b0:	9a04      	ldr	r2, [sp, #16]
 80009b2:	b9d8      	cbnz	r0, 80009ec <_vfiprintf_r+0x110>
 80009b4:	06d1      	lsls	r1, r2, #27
 80009b6:	bf44      	itt	mi
 80009b8:	2320      	movmi	r3, #32
 80009ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80009be:	0713      	lsls	r3, r2, #28
 80009c0:	bf44      	itt	mi
 80009c2:	232b      	movmi	r3, #43	@ 0x2b
 80009c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80009c8:	f89a 3000 	ldrb.w	r3, [sl]
 80009cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80009ce:	d015      	beq.n	80009fc <_vfiprintf_r+0x120>
 80009d0:	9a07      	ldr	r2, [sp, #28]
 80009d2:	4654      	mov	r4, sl
 80009d4:	2000      	movs	r0, #0
 80009d6:	f04f 0c0a 	mov.w	ip, #10
 80009da:	4621      	mov	r1, r4
 80009dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80009e0:	3b30      	subs	r3, #48	@ 0x30
 80009e2:	2b09      	cmp	r3, #9
 80009e4:	d94b      	bls.n	8000a7e <_vfiprintf_r+0x1a2>
 80009e6:	b1b0      	cbz	r0, 8000a16 <_vfiprintf_r+0x13a>
 80009e8:	9207      	str	r2, [sp, #28]
 80009ea:	e014      	b.n	8000a16 <_vfiprintf_r+0x13a>
 80009ec:	eba0 0308 	sub.w	r3, r0, r8
 80009f0:	fa09 f303 	lsl.w	r3, r9, r3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	9304      	str	r3, [sp, #16]
 80009f8:	46a2      	mov	sl, r4
 80009fa:	e7d2      	b.n	80009a2 <_vfiprintf_r+0xc6>
 80009fc:	9b03      	ldr	r3, [sp, #12]
 80009fe:	1d19      	adds	r1, r3, #4
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	9103      	str	r1, [sp, #12]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bfbb      	ittet	lt
 8000a08:	425b      	neglt	r3, r3
 8000a0a:	f042 0202 	orrlt.w	r2, r2, #2
 8000a0e:	9307      	strge	r3, [sp, #28]
 8000a10:	9307      	strlt	r3, [sp, #28]
 8000a12:	bfb8      	it	lt
 8000a14:	9204      	strlt	r2, [sp, #16]
 8000a16:	7823      	ldrb	r3, [r4, #0]
 8000a18:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a1a:	d10a      	bne.n	8000a32 <_vfiprintf_r+0x156>
 8000a1c:	7863      	ldrb	r3, [r4, #1]
 8000a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a20:	d132      	bne.n	8000a88 <_vfiprintf_r+0x1ac>
 8000a22:	9b03      	ldr	r3, [sp, #12]
 8000a24:	1d1a      	adds	r2, r3, #4
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	9203      	str	r2, [sp, #12]
 8000a2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000a2e:	3402      	adds	r4, #2
 8000a30:	9305      	str	r3, [sp, #20]
 8000a32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000b08 <_vfiprintf_r+0x22c>
 8000a36:	7821      	ldrb	r1, [r4, #0]
 8000a38:	2203      	movs	r2, #3
 8000a3a:	4650      	mov	r0, sl
 8000a3c:	f7ff fbd0 	bl	80001e0 <memchr>
 8000a40:	b138      	cbz	r0, 8000a52 <_vfiprintf_r+0x176>
 8000a42:	9b04      	ldr	r3, [sp, #16]
 8000a44:	eba0 000a 	sub.w	r0, r0, sl
 8000a48:	2240      	movs	r2, #64	@ 0x40
 8000a4a:	4082      	lsls	r2, r0
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	3401      	adds	r4, #1
 8000a50:	9304      	str	r3, [sp, #16]
 8000a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a56:	4829      	ldr	r0, [pc, #164]	@ (8000afc <_vfiprintf_r+0x220>)
 8000a58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000a5c:	2206      	movs	r2, #6
 8000a5e:	f7ff fbbf 	bl	80001e0 <memchr>
 8000a62:	2800      	cmp	r0, #0
 8000a64:	d03f      	beq.n	8000ae6 <_vfiprintf_r+0x20a>
 8000a66:	4b26      	ldr	r3, [pc, #152]	@ (8000b00 <_vfiprintf_r+0x224>)
 8000a68:	bb1b      	cbnz	r3, 8000ab2 <_vfiprintf_r+0x1d6>
 8000a6a:	9b03      	ldr	r3, [sp, #12]
 8000a6c:	3307      	adds	r3, #7
 8000a6e:	f023 0307 	bic.w	r3, r3, #7
 8000a72:	3308      	adds	r3, #8
 8000a74:	9303      	str	r3, [sp, #12]
 8000a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000a78:	443b      	add	r3, r7
 8000a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a7c:	e76a      	b.n	8000954 <_vfiprintf_r+0x78>
 8000a7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a82:	460c      	mov	r4, r1
 8000a84:	2001      	movs	r0, #1
 8000a86:	e7a8      	b.n	80009da <_vfiprintf_r+0xfe>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	3401      	adds	r4, #1
 8000a8c:	9305      	str	r3, [sp, #20]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 0c0a 	mov.w	ip, #10
 8000a94:	4620      	mov	r0, r4
 8000a96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a9a:	3a30      	subs	r2, #48	@ 0x30
 8000a9c:	2a09      	cmp	r2, #9
 8000a9e:	d903      	bls.n	8000aa8 <_vfiprintf_r+0x1cc>
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0c6      	beq.n	8000a32 <_vfiprintf_r+0x156>
 8000aa4:	9105      	str	r1, [sp, #20]
 8000aa6:	e7c4      	b.n	8000a32 <_vfiprintf_r+0x156>
 8000aa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8000aac:	4604      	mov	r4, r0
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e7f0      	b.n	8000a94 <_vfiprintf_r+0x1b8>
 8000ab2:	ab03      	add	r3, sp, #12
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	462a      	mov	r2, r5
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <_vfiprintf_r+0x228>)
 8000aba:	a904      	add	r1, sp, #16
 8000abc:	4630      	mov	r0, r6
 8000abe:	f3af 8000 	nop.w
 8000ac2:	4607      	mov	r7, r0
 8000ac4:	1c78      	adds	r0, r7, #1
 8000ac6:	d1d6      	bne.n	8000a76 <_vfiprintf_r+0x19a>
 8000ac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000aca:	07d9      	lsls	r1, r3, #31
 8000acc:	d405      	bmi.n	8000ada <_vfiprintf_r+0x1fe>
 8000ace:	89ab      	ldrh	r3, [r5, #12]
 8000ad0:	059a      	lsls	r2, r3, #22
 8000ad2:	d402      	bmi.n	8000ada <_vfiprintf_r+0x1fe>
 8000ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ad6:	f7ff fed7 	bl	8000888 <__retarget_lock_release_recursive>
 8000ada:	89ab      	ldrh	r3, [r5, #12]
 8000adc:	065b      	lsls	r3, r3, #25
 8000ade:	f53f af1f 	bmi.w	8000920 <_vfiprintf_r+0x44>
 8000ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ae4:	e71e      	b.n	8000924 <_vfiprintf_r+0x48>
 8000ae6:	ab03      	add	r3, sp, #12
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	462a      	mov	r2, r5
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <_vfiprintf_r+0x228>)
 8000aee:	a904      	add	r1, sp, #16
 8000af0:	4630      	mov	r0, r6
 8000af2:	f000 f91b 	bl	8000d2c <_printf_i>
 8000af6:	e7e4      	b.n	8000ac2 <_vfiprintf_r+0x1e6>
 8000af8:	08001500 	.word	0x08001500
 8000afc:	0800150a 	.word	0x0800150a
 8000b00:	00000000 	.word	0x00000000
 8000b04:	080008b9 	.word	0x080008b9
 8000b08:	08001506 	.word	0x08001506

08000b0c <sbrk_aligned>:
 8000b0c:	b570      	push	{r4, r5, r6, lr}
 8000b0e:	4e0f      	ldr	r6, [pc, #60]	@ (8000b4c <sbrk_aligned+0x40>)
 8000b10:	460c      	mov	r4, r1
 8000b12:	6831      	ldr	r1, [r6, #0]
 8000b14:	4605      	mov	r5, r0
 8000b16:	b911      	cbnz	r1, 8000b1e <sbrk_aligned+0x12>
 8000b18:	f000 fc70 	bl	80013fc <_sbrk_r>
 8000b1c:	6030      	str	r0, [r6, #0]
 8000b1e:	4621      	mov	r1, r4
 8000b20:	4628      	mov	r0, r5
 8000b22:	f000 fc6b 	bl	80013fc <_sbrk_r>
 8000b26:	1c43      	adds	r3, r0, #1
 8000b28:	d103      	bne.n	8000b32 <sbrk_aligned+0x26>
 8000b2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000b2e:	4620      	mov	r0, r4
 8000b30:	bd70      	pop	{r4, r5, r6, pc}
 8000b32:	1cc4      	adds	r4, r0, #3
 8000b34:	f024 0403 	bic.w	r4, r4, #3
 8000b38:	42a0      	cmp	r0, r4
 8000b3a:	d0f8      	beq.n	8000b2e <sbrk_aligned+0x22>
 8000b3c:	1a21      	subs	r1, r4, r0
 8000b3e:	4628      	mov	r0, r5
 8000b40:	f000 fc5c 	bl	80013fc <_sbrk_r>
 8000b44:	3001      	adds	r0, #1
 8000b46:	d1f2      	bne.n	8000b2e <sbrk_aligned+0x22>
 8000b48:	e7ef      	b.n	8000b2a <sbrk_aligned+0x1e>
 8000b4a:	bf00      	nop
 8000b4c:	200001c0 	.word	0x200001c0

08000b50 <_malloc_r>:
 8000b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b54:	1ccd      	adds	r5, r1, #3
 8000b56:	f025 0503 	bic.w	r5, r5, #3
 8000b5a:	3508      	adds	r5, #8
 8000b5c:	2d0c      	cmp	r5, #12
 8000b5e:	bf38      	it	cc
 8000b60:	250c      	movcc	r5, #12
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	4606      	mov	r6, r0
 8000b66:	db01      	blt.n	8000b6c <_malloc_r+0x1c>
 8000b68:	42a9      	cmp	r1, r5
 8000b6a:	d904      	bls.n	8000b76 <_malloc_r+0x26>
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	6033      	str	r3, [r6, #0]
 8000b70:	2000      	movs	r0, #0
 8000b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c4c <_malloc_r+0xfc>
 8000b7a:	f000 faa3 	bl	80010c4 <__malloc_lock>
 8000b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b82:	461c      	mov	r4, r3
 8000b84:	bb44      	cbnz	r4, 8000bd8 <_malloc_r+0x88>
 8000b86:	4629      	mov	r1, r5
 8000b88:	4630      	mov	r0, r6
 8000b8a:	f7ff ffbf 	bl	8000b0c <sbrk_aligned>
 8000b8e:	1c43      	adds	r3, r0, #1
 8000b90:	4604      	mov	r4, r0
 8000b92:	d158      	bne.n	8000c46 <_malloc_r+0xf6>
 8000b94:	f8d8 4000 	ldr.w	r4, [r8]
 8000b98:	4627      	mov	r7, r4
 8000b9a:	2f00      	cmp	r7, #0
 8000b9c:	d143      	bne.n	8000c26 <_malloc_r+0xd6>
 8000b9e:	2c00      	cmp	r4, #0
 8000ba0:	d04b      	beq.n	8000c3a <_malloc_r+0xea>
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	eb04 0903 	add.w	r9, r4, r3
 8000bac:	f000 fc26 	bl	80013fc <_sbrk_r>
 8000bb0:	4581      	cmp	r9, r0
 8000bb2:	d142      	bne.n	8000c3a <_malloc_r+0xea>
 8000bb4:	6821      	ldr	r1, [r4, #0]
 8000bb6:	1a6d      	subs	r5, r5, r1
 8000bb8:	4629      	mov	r1, r5
 8000bba:	4630      	mov	r0, r6
 8000bbc:	f7ff ffa6 	bl	8000b0c <sbrk_aligned>
 8000bc0:	3001      	adds	r0, #1
 8000bc2:	d03a      	beq.n	8000c3a <_malloc_r+0xea>
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	442b      	add	r3, r5
 8000bc8:	6023      	str	r3, [r4, #0]
 8000bca:	f8d8 3000 	ldr.w	r3, [r8]
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	bb62      	cbnz	r2, 8000c2c <_malloc_r+0xdc>
 8000bd2:	f8c8 7000 	str.w	r7, [r8]
 8000bd6:	e00f      	b.n	8000bf8 <_malloc_r+0xa8>
 8000bd8:	6822      	ldr	r2, [r4, #0]
 8000bda:	1b52      	subs	r2, r2, r5
 8000bdc:	d420      	bmi.n	8000c20 <_malloc_r+0xd0>
 8000bde:	2a0b      	cmp	r2, #11
 8000be0:	d917      	bls.n	8000c12 <_malloc_r+0xc2>
 8000be2:	1961      	adds	r1, r4, r5
 8000be4:	42a3      	cmp	r3, r4
 8000be6:	6025      	str	r5, [r4, #0]
 8000be8:	bf18      	it	ne
 8000bea:	6059      	strne	r1, [r3, #4]
 8000bec:	6863      	ldr	r3, [r4, #4]
 8000bee:	bf08      	it	eq
 8000bf0:	f8c8 1000 	streq.w	r1, [r8]
 8000bf4:	5162      	str	r2, [r4, r5]
 8000bf6:	604b      	str	r3, [r1, #4]
 8000bf8:	4630      	mov	r0, r6
 8000bfa:	f000 fa69 	bl	80010d0 <__malloc_unlock>
 8000bfe:	f104 000b 	add.w	r0, r4, #11
 8000c02:	1d23      	adds	r3, r4, #4
 8000c04:	f020 0007 	bic.w	r0, r0, #7
 8000c08:	1ac2      	subs	r2, r0, r3
 8000c0a:	bf1c      	itt	ne
 8000c0c:	1a1b      	subne	r3, r3, r0
 8000c0e:	50a3      	strne	r3, [r4, r2]
 8000c10:	e7af      	b.n	8000b72 <_malloc_r+0x22>
 8000c12:	6862      	ldr	r2, [r4, #4]
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	bf0c      	ite	eq
 8000c18:	f8c8 2000 	streq.w	r2, [r8]
 8000c1c:	605a      	strne	r2, [r3, #4]
 8000c1e:	e7eb      	b.n	8000bf8 <_malloc_r+0xa8>
 8000c20:	4623      	mov	r3, r4
 8000c22:	6864      	ldr	r4, [r4, #4]
 8000c24:	e7ae      	b.n	8000b84 <_malloc_r+0x34>
 8000c26:	463c      	mov	r4, r7
 8000c28:	687f      	ldr	r7, [r7, #4]
 8000c2a:	e7b6      	b.n	8000b9a <_malloc_r+0x4a>
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	42a3      	cmp	r3, r4
 8000c32:	d1fb      	bne.n	8000c2c <_malloc_r+0xdc>
 8000c34:	2300      	movs	r3, #0
 8000c36:	6053      	str	r3, [r2, #4]
 8000c38:	e7de      	b.n	8000bf8 <_malloc_r+0xa8>
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	6033      	str	r3, [r6, #0]
 8000c3e:	4630      	mov	r0, r6
 8000c40:	f000 fa46 	bl	80010d0 <__malloc_unlock>
 8000c44:	e794      	b.n	8000b70 <_malloc_r+0x20>
 8000c46:	6005      	str	r5, [r0, #0]
 8000c48:	e7d6      	b.n	8000bf8 <_malloc_r+0xa8>
 8000c4a:	bf00      	nop
 8000c4c:	200001c4 	.word	0x200001c4

08000c50 <_printf_common>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	4616      	mov	r6, r2
 8000c56:	4698      	mov	r8, r3
 8000c58:	688a      	ldr	r2, [r1, #8]
 8000c5a:	690b      	ldr	r3, [r1, #16]
 8000c5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c60:	4293      	cmp	r3, r2
 8000c62:	bfb8      	it	lt
 8000c64:	4613      	movlt	r3, r2
 8000c66:	6033      	str	r3, [r6, #0]
 8000c68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c6c:	4607      	mov	r7, r0
 8000c6e:	460c      	mov	r4, r1
 8000c70:	b10a      	cbz	r2, 8000c76 <_printf_common+0x26>
 8000c72:	3301      	adds	r3, #1
 8000c74:	6033      	str	r3, [r6, #0]
 8000c76:	6823      	ldr	r3, [r4, #0]
 8000c78:	0699      	lsls	r1, r3, #26
 8000c7a:	bf42      	ittt	mi
 8000c7c:	6833      	ldrmi	r3, [r6, #0]
 8000c7e:	3302      	addmi	r3, #2
 8000c80:	6033      	strmi	r3, [r6, #0]
 8000c82:	6825      	ldr	r5, [r4, #0]
 8000c84:	f015 0506 	ands.w	r5, r5, #6
 8000c88:	d106      	bne.n	8000c98 <_printf_common+0x48>
 8000c8a:	f104 0a19 	add.w	sl, r4, #25
 8000c8e:	68e3      	ldr	r3, [r4, #12]
 8000c90:	6832      	ldr	r2, [r6, #0]
 8000c92:	1a9b      	subs	r3, r3, r2
 8000c94:	42ab      	cmp	r3, r5
 8000c96:	dc26      	bgt.n	8000ce6 <_printf_common+0x96>
 8000c98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c9c:	6822      	ldr	r2, [r4, #0]
 8000c9e:	3b00      	subs	r3, #0
 8000ca0:	bf18      	it	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	0692      	lsls	r2, r2, #26
 8000ca6:	d42b      	bmi.n	8000d00 <_printf_common+0xb0>
 8000ca8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000cac:	4641      	mov	r1, r8
 8000cae:	4638      	mov	r0, r7
 8000cb0:	47c8      	blx	r9
 8000cb2:	3001      	adds	r0, #1
 8000cb4:	d01e      	beq.n	8000cf4 <_printf_common+0xa4>
 8000cb6:	6823      	ldr	r3, [r4, #0]
 8000cb8:	6922      	ldr	r2, [r4, #16]
 8000cba:	f003 0306 	and.w	r3, r3, #6
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf02      	ittt	eq
 8000cc2:	68e5      	ldreq	r5, [r4, #12]
 8000cc4:	6833      	ldreq	r3, [r6, #0]
 8000cc6:	1aed      	subeq	r5, r5, r3
 8000cc8:	68a3      	ldr	r3, [r4, #8]
 8000cca:	bf0c      	ite	eq
 8000ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000cd0:	2500      	movne	r5, #0
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	bfc4      	itt	gt
 8000cd6:	1a9b      	subgt	r3, r3, r2
 8000cd8:	18ed      	addgt	r5, r5, r3
 8000cda:	2600      	movs	r6, #0
 8000cdc:	341a      	adds	r4, #26
 8000cde:	42b5      	cmp	r5, r6
 8000ce0:	d11a      	bne.n	8000d18 <_printf_common+0xc8>
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	e008      	b.n	8000cf8 <_printf_common+0xa8>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	4652      	mov	r2, sl
 8000cea:	4641      	mov	r1, r8
 8000cec:	4638      	mov	r0, r7
 8000cee:	47c8      	blx	r9
 8000cf0:	3001      	adds	r0, #1
 8000cf2:	d103      	bne.n	8000cfc <_printf_common+0xac>
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfc:	3501      	adds	r5, #1
 8000cfe:	e7c6      	b.n	8000c8e <_printf_common+0x3e>
 8000d00:	18e1      	adds	r1, r4, r3
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	2030      	movs	r0, #48	@ 0x30
 8000d06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d0a:	4422      	add	r2, r4
 8000d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d14:	3302      	adds	r3, #2
 8000d16:	e7c7      	b.n	8000ca8 <_printf_common+0x58>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	4622      	mov	r2, r4
 8000d1c:	4641      	mov	r1, r8
 8000d1e:	4638      	mov	r0, r7
 8000d20:	47c8      	blx	r9
 8000d22:	3001      	adds	r0, #1
 8000d24:	d0e6      	beq.n	8000cf4 <_printf_common+0xa4>
 8000d26:	3601      	adds	r6, #1
 8000d28:	e7d9      	b.n	8000cde <_printf_common+0x8e>
	...

08000d2c <_printf_i>:
 8000d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d30:	7e0f      	ldrb	r7, [r1, #24]
 8000d32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d34:	2f78      	cmp	r7, #120	@ 0x78
 8000d36:	4691      	mov	r9, r2
 8000d38:	4680      	mov	r8, r0
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	469a      	mov	sl, r3
 8000d3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d42:	d807      	bhi.n	8000d54 <_printf_i+0x28>
 8000d44:	2f62      	cmp	r7, #98	@ 0x62
 8000d46:	d80a      	bhi.n	8000d5e <_printf_i+0x32>
 8000d48:	2f00      	cmp	r7, #0
 8000d4a:	f000 80d2 	beq.w	8000ef2 <_printf_i+0x1c6>
 8000d4e:	2f58      	cmp	r7, #88	@ 0x58
 8000d50:	f000 80b9 	beq.w	8000ec6 <_printf_i+0x19a>
 8000d54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d5c:	e03a      	b.n	8000dd4 <_printf_i+0xa8>
 8000d5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d62:	2b15      	cmp	r3, #21
 8000d64:	d8f6      	bhi.n	8000d54 <_printf_i+0x28>
 8000d66:	a101      	add	r1, pc, #4	@ (adr r1, 8000d6c <_printf_i+0x40>)
 8000d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d6c:	08000dc5 	.word	0x08000dc5
 8000d70:	08000dd9 	.word	0x08000dd9
 8000d74:	08000d55 	.word	0x08000d55
 8000d78:	08000d55 	.word	0x08000d55
 8000d7c:	08000d55 	.word	0x08000d55
 8000d80:	08000d55 	.word	0x08000d55
 8000d84:	08000dd9 	.word	0x08000dd9
 8000d88:	08000d55 	.word	0x08000d55
 8000d8c:	08000d55 	.word	0x08000d55
 8000d90:	08000d55 	.word	0x08000d55
 8000d94:	08000d55 	.word	0x08000d55
 8000d98:	08000ed9 	.word	0x08000ed9
 8000d9c:	08000e03 	.word	0x08000e03
 8000da0:	08000e93 	.word	0x08000e93
 8000da4:	08000d55 	.word	0x08000d55
 8000da8:	08000d55 	.word	0x08000d55
 8000dac:	08000efb 	.word	0x08000efb
 8000db0:	08000d55 	.word	0x08000d55
 8000db4:	08000e03 	.word	0x08000e03
 8000db8:	08000d55 	.word	0x08000d55
 8000dbc:	08000d55 	.word	0x08000d55
 8000dc0:	08000e9b 	.word	0x08000e9b
 8000dc4:	6833      	ldr	r3, [r6, #0]
 8000dc6:	1d1a      	adds	r2, r3, #4
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6032      	str	r2, [r6, #0]
 8000dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000dd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e09d      	b.n	8000f14 <_printf_i+0x1e8>
 8000dd8:	6833      	ldr	r3, [r6, #0]
 8000dda:	6820      	ldr	r0, [r4, #0]
 8000ddc:	1d19      	adds	r1, r3, #4
 8000dde:	6031      	str	r1, [r6, #0]
 8000de0:	0606      	lsls	r6, r0, #24
 8000de2:	d501      	bpl.n	8000de8 <_printf_i+0xbc>
 8000de4:	681d      	ldr	r5, [r3, #0]
 8000de6:	e003      	b.n	8000df0 <_printf_i+0xc4>
 8000de8:	0645      	lsls	r5, r0, #25
 8000dea:	d5fb      	bpl.n	8000de4 <_printf_i+0xb8>
 8000dec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000df0:	2d00      	cmp	r5, #0
 8000df2:	da03      	bge.n	8000dfc <_printf_i+0xd0>
 8000df4:	232d      	movs	r3, #45	@ 0x2d
 8000df6:	426d      	negs	r5, r5
 8000df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000dfc:	4859      	ldr	r0, [pc, #356]	@ (8000f64 <_printf_i+0x238>)
 8000dfe:	230a      	movs	r3, #10
 8000e00:	e011      	b.n	8000e26 <_printf_i+0xfa>
 8000e02:	6821      	ldr	r1, [r4, #0]
 8000e04:	6833      	ldr	r3, [r6, #0]
 8000e06:	0608      	lsls	r0, r1, #24
 8000e08:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e0c:	d402      	bmi.n	8000e14 <_printf_i+0xe8>
 8000e0e:	0649      	lsls	r1, r1, #25
 8000e10:	bf48      	it	mi
 8000e12:	b2ad      	uxthmi	r5, r5
 8000e14:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e16:	4853      	ldr	r0, [pc, #332]	@ (8000f64 <_printf_i+0x238>)
 8000e18:	6033      	str	r3, [r6, #0]
 8000e1a:	bf14      	ite	ne
 8000e1c:	230a      	movne	r3, #10
 8000e1e:	2308      	moveq	r3, #8
 8000e20:	2100      	movs	r1, #0
 8000e22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e26:	6866      	ldr	r6, [r4, #4]
 8000e28:	60a6      	str	r6, [r4, #8]
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	bfa2      	ittt	ge
 8000e2e:	6821      	ldrge	r1, [r4, #0]
 8000e30:	f021 0104 	bicge.w	r1, r1, #4
 8000e34:	6021      	strge	r1, [r4, #0]
 8000e36:	b90d      	cbnz	r5, 8000e3c <_printf_i+0x110>
 8000e38:	2e00      	cmp	r6, #0
 8000e3a:	d04b      	beq.n	8000ed4 <_printf_i+0x1a8>
 8000e3c:	4616      	mov	r6, r2
 8000e3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e42:	fb03 5711 	mls	r7, r3, r1, r5
 8000e46:	5dc7      	ldrb	r7, [r0, r7]
 8000e48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e4c:	462f      	mov	r7, r5
 8000e4e:	42bb      	cmp	r3, r7
 8000e50:	460d      	mov	r5, r1
 8000e52:	d9f4      	bls.n	8000e3e <_printf_i+0x112>
 8000e54:	2b08      	cmp	r3, #8
 8000e56:	d10b      	bne.n	8000e70 <_printf_i+0x144>
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	07df      	lsls	r7, r3, #31
 8000e5c:	d508      	bpl.n	8000e70 <_printf_i+0x144>
 8000e5e:	6923      	ldr	r3, [r4, #16]
 8000e60:	6861      	ldr	r1, [r4, #4]
 8000e62:	4299      	cmp	r1, r3
 8000e64:	bfde      	ittt	le
 8000e66:	2330      	movle	r3, #48	@ 0x30
 8000e68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e6c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000e70:	1b92      	subs	r2, r2, r6
 8000e72:	6122      	str	r2, [r4, #16]
 8000e74:	f8cd a000 	str.w	sl, [sp]
 8000e78:	464b      	mov	r3, r9
 8000e7a:	aa03      	add	r2, sp, #12
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	4640      	mov	r0, r8
 8000e80:	f7ff fee6 	bl	8000c50 <_printf_common>
 8000e84:	3001      	adds	r0, #1
 8000e86:	d14a      	bne.n	8000f1e <_printf_i+0x1f2>
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e8c:	b004      	add	sp, #16
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	6023      	str	r3, [r4, #0]
 8000e9a:	4833      	ldr	r0, [pc, #204]	@ (8000f68 <_printf_i+0x23c>)
 8000e9c:	2778      	movs	r7, #120	@ 0x78
 8000e9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	6831      	ldr	r1, [r6, #0]
 8000ea6:	061f      	lsls	r7, r3, #24
 8000ea8:	f851 5b04 	ldr.w	r5, [r1], #4
 8000eac:	d402      	bmi.n	8000eb4 <_printf_i+0x188>
 8000eae:	065f      	lsls	r7, r3, #25
 8000eb0:	bf48      	it	mi
 8000eb2:	b2ad      	uxthmi	r5, r5
 8000eb4:	6031      	str	r1, [r6, #0]
 8000eb6:	07d9      	lsls	r1, r3, #31
 8000eb8:	bf44      	itt	mi
 8000eba:	f043 0320 	orrmi.w	r3, r3, #32
 8000ebe:	6023      	strmi	r3, [r4, #0]
 8000ec0:	b11d      	cbz	r5, 8000eca <_printf_i+0x19e>
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	e7ac      	b.n	8000e20 <_printf_i+0xf4>
 8000ec6:	4827      	ldr	r0, [pc, #156]	@ (8000f64 <_printf_i+0x238>)
 8000ec8:	e7e9      	b.n	8000e9e <_printf_i+0x172>
 8000eca:	6823      	ldr	r3, [r4, #0]
 8000ecc:	f023 0320 	bic.w	r3, r3, #32
 8000ed0:	6023      	str	r3, [r4, #0]
 8000ed2:	e7f6      	b.n	8000ec2 <_printf_i+0x196>
 8000ed4:	4616      	mov	r6, r2
 8000ed6:	e7bd      	b.n	8000e54 <_printf_i+0x128>
 8000ed8:	6833      	ldr	r3, [r6, #0]
 8000eda:	6825      	ldr	r5, [r4, #0]
 8000edc:	6961      	ldr	r1, [r4, #20]
 8000ede:	1d18      	adds	r0, r3, #4
 8000ee0:	6030      	str	r0, [r6, #0]
 8000ee2:	062e      	lsls	r6, r5, #24
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	d501      	bpl.n	8000eec <_printf_i+0x1c0>
 8000ee8:	6019      	str	r1, [r3, #0]
 8000eea:	e002      	b.n	8000ef2 <_printf_i+0x1c6>
 8000eec:	0668      	lsls	r0, r5, #25
 8000eee:	d5fb      	bpl.n	8000ee8 <_printf_i+0x1bc>
 8000ef0:	8019      	strh	r1, [r3, #0]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	6123      	str	r3, [r4, #16]
 8000ef6:	4616      	mov	r6, r2
 8000ef8:	e7bc      	b.n	8000e74 <_printf_i+0x148>
 8000efa:	6833      	ldr	r3, [r6, #0]
 8000efc:	1d1a      	adds	r2, r3, #4
 8000efe:	6032      	str	r2, [r6, #0]
 8000f00:	681e      	ldr	r6, [r3, #0]
 8000f02:	6862      	ldr	r2, [r4, #4]
 8000f04:	2100      	movs	r1, #0
 8000f06:	4630      	mov	r0, r6
 8000f08:	f7ff f96a 	bl	80001e0 <memchr>
 8000f0c:	b108      	cbz	r0, 8000f12 <_printf_i+0x1e6>
 8000f0e:	1b80      	subs	r0, r0, r6
 8000f10:	6060      	str	r0, [r4, #4]
 8000f12:	6863      	ldr	r3, [r4, #4]
 8000f14:	6123      	str	r3, [r4, #16]
 8000f16:	2300      	movs	r3, #0
 8000f18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f1c:	e7aa      	b.n	8000e74 <_printf_i+0x148>
 8000f1e:	6923      	ldr	r3, [r4, #16]
 8000f20:	4632      	mov	r2, r6
 8000f22:	4649      	mov	r1, r9
 8000f24:	4640      	mov	r0, r8
 8000f26:	47d0      	blx	sl
 8000f28:	3001      	adds	r0, #1
 8000f2a:	d0ad      	beq.n	8000e88 <_printf_i+0x15c>
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	079b      	lsls	r3, r3, #30
 8000f30:	d413      	bmi.n	8000f5a <_printf_i+0x22e>
 8000f32:	68e0      	ldr	r0, [r4, #12]
 8000f34:	9b03      	ldr	r3, [sp, #12]
 8000f36:	4298      	cmp	r0, r3
 8000f38:	bfb8      	it	lt
 8000f3a:	4618      	movlt	r0, r3
 8000f3c:	e7a6      	b.n	8000e8c <_printf_i+0x160>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	4632      	mov	r2, r6
 8000f42:	4649      	mov	r1, r9
 8000f44:	4640      	mov	r0, r8
 8000f46:	47d0      	blx	sl
 8000f48:	3001      	adds	r0, #1
 8000f4a:	d09d      	beq.n	8000e88 <_printf_i+0x15c>
 8000f4c:	3501      	adds	r5, #1
 8000f4e:	68e3      	ldr	r3, [r4, #12]
 8000f50:	9903      	ldr	r1, [sp, #12]
 8000f52:	1a5b      	subs	r3, r3, r1
 8000f54:	42ab      	cmp	r3, r5
 8000f56:	dcf2      	bgt.n	8000f3e <_printf_i+0x212>
 8000f58:	e7eb      	b.n	8000f32 <_printf_i+0x206>
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	f104 0619 	add.w	r6, r4, #25
 8000f60:	e7f5      	b.n	8000f4e <_printf_i+0x222>
 8000f62:	bf00      	nop
 8000f64:	08001511 	.word	0x08001511
 8000f68:	08001522 	.word	0x08001522

08000f6c <__sflush_r>:
 8000f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f74:	0716      	lsls	r6, r2, #28
 8000f76:	4605      	mov	r5, r0
 8000f78:	460c      	mov	r4, r1
 8000f7a:	d454      	bmi.n	8001026 <__sflush_r+0xba>
 8000f7c:	684b      	ldr	r3, [r1, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	dc02      	bgt.n	8000f88 <__sflush_r+0x1c>
 8000f82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	dd48      	ble.n	800101a <__sflush_r+0xae>
 8000f88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f8a:	2e00      	cmp	r6, #0
 8000f8c:	d045      	beq.n	800101a <__sflush_r+0xae>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000f94:	682f      	ldr	r7, [r5, #0]
 8000f96:	6a21      	ldr	r1, [r4, #32]
 8000f98:	602b      	str	r3, [r5, #0]
 8000f9a:	d030      	beq.n	8000ffe <__sflush_r+0x92>
 8000f9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000f9e:	89a3      	ldrh	r3, [r4, #12]
 8000fa0:	0759      	lsls	r1, r3, #29
 8000fa2:	d505      	bpl.n	8000fb0 <__sflush_r+0x44>
 8000fa4:	6863      	ldr	r3, [r4, #4]
 8000fa6:	1ad2      	subs	r2, r2, r3
 8000fa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000faa:	b10b      	cbz	r3, 8000fb0 <__sflush_r+0x44>
 8000fac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000fae:	1ad2      	subs	r2, r2, r3
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000fb4:	6a21      	ldr	r1, [r4, #32]
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	47b0      	blx	r6
 8000fba:	1c43      	adds	r3, r0, #1
 8000fbc:	89a3      	ldrh	r3, [r4, #12]
 8000fbe:	d106      	bne.n	8000fce <__sflush_r+0x62>
 8000fc0:	6829      	ldr	r1, [r5, #0]
 8000fc2:	291d      	cmp	r1, #29
 8000fc4:	d82b      	bhi.n	800101e <__sflush_r+0xb2>
 8000fc6:	4a2a      	ldr	r2, [pc, #168]	@ (8001070 <__sflush_r+0x104>)
 8000fc8:	410a      	asrs	r2, r1
 8000fca:	07d6      	lsls	r6, r2, #31
 8000fcc:	d427      	bmi.n	800101e <__sflush_r+0xb2>
 8000fce:	2200      	movs	r2, #0
 8000fd0:	6062      	str	r2, [r4, #4]
 8000fd2:	04d9      	lsls	r1, r3, #19
 8000fd4:	6922      	ldr	r2, [r4, #16]
 8000fd6:	6022      	str	r2, [r4, #0]
 8000fd8:	d504      	bpl.n	8000fe4 <__sflush_r+0x78>
 8000fda:	1c42      	adds	r2, r0, #1
 8000fdc:	d101      	bne.n	8000fe2 <__sflush_r+0x76>
 8000fde:	682b      	ldr	r3, [r5, #0]
 8000fe0:	b903      	cbnz	r3, 8000fe4 <__sflush_r+0x78>
 8000fe2:	6560      	str	r0, [r4, #84]	@ 0x54
 8000fe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000fe6:	602f      	str	r7, [r5, #0]
 8000fe8:	b1b9      	cbz	r1, 800101a <__sflush_r+0xae>
 8000fea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000fee:	4299      	cmp	r1, r3
 8000ff0:	d002      	beq.n	8000ff8 <__sflush_r+0x8c>
 8000ff2:	4628      	mov	r0, r5
 8000ff4:	f000 fa24 	bl	8001440 <_free_r>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	6363      	str	r3, [r4, #52]	@ 0x34
 8000ffc:	e00d      	b.n	800101a <__sflush_r+0xae>
 8000ffe:	2301      	movs	r3, #1
 8001000:	4628      	mov	r0, r5
 8001002:	47b0      	blx	r6
 8001004:	4602      	mov	r2, r0
 8001006:	1c50      	adds	r0, r2, #1
 8001008:	d1c9      	bne.n	8000f9e <__sflush_r+0x32>
 800100a:	682b      	ldr	r3, [r5, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0c6      	beq.n	8000f9e <__sflush_r+0x32>
 8001010:	2b1d      	cmp	r3, #29
 8001012:	d001      	beq.n	8001018 <__sflush_r+0xac>
 8001014:	2b16      	cmp	r3, #22
 8001016:	d11e      	bne.n	8001056 <__sflush_r+0xea>
 8001018:	602f      	str	r7, [r5, #0]
 800101a:	2000      	movs	r0, #0
 800101c:	e022      	b.n	8001064 <__sflush_r+0xf8>
 800101e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001022:	b21b      	sxth	r3, r3
 8001024:	e01b      	b.n	800105e <__sflush_r+0xf2>
 8001026:	690f      	ldr	r7, [r1, #16]
 8001028:	2f00      	cmp	r7, #0
 800102a:	d0f6      	beq.n	800101a <__sflush_r+0xae>
 800102c:	0793      	lsls	r3, r2, #30
 800102e:	680e      	ldr	r6, [r1, #0]
 8001030:	bf08      	it	eq
 8001032:	694b      	ldreq	r3, [r1, #20]
 8001034:	600f      	str	r7, [r1, #0]
 8001036:	bf18      	it	ne
 8001038:	2300      	movne	r3, #0
 800103a:	eba6 0807 	sub.w	r8, r6, r7
 800103e:	608b      	str	r3, [r1, #8]
 8001040:	f1b8 0f00 	cmp.w	r8, #0
 8001044:	dde9      	ble.n	800101a <__sflush_r+0xae>
 8001046:	6a21      	ldr	r1, [r4, #32]
 8001048:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800104a:	4643      	mov	r3, r8
 800104c:	463a      	mov	r2, r7
 800104e:	4628      	mov	r0, r5
 8001050:	47b0      	blx	r6
 8001052:	2800      	cmp	r0, #0
 8001054:	dc08      	bgt.n	8001068 <__sflush_r+0xfc>
 8001056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800105a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800105e:	81a3      	strh	r3, [r4, #12]
 8001060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001068:	4407      	add	r7, r0
 800106a:	eba8 0800 	sub.w	r8, r8, r0
 800106e:	e7e7      	b.n	8001040 <__sflush_r+0xd4>
 8001070:	dfbffffe 	.word	0xdfbffffe

08001074 <_fflush_r>:
 8001074:	b538      	push	{r3, r4, r5, lr}
 8001076:	690b      	ldr	r3, [r1, #16]
 8001078:	4605      	mov	r5, r0
 800107a:	460c      	mov	r4, r1
 800107c:	b913      	cbnz	r3, 8001084 <_fflush_r+0x10>
 800107e:	2500      	movs	r5, #0
 8001080:	4628      	mov	r0, r5
 8001082:	bd38      	pop	{r3, r4, r5, pc}
 8001084:	b118      	cbz	r0, 800108e <_fflush_r+0x1a>
 8001086:	6a03      	ldr	r3, [r0, #32]
 8001088:	b90b      	cbnz	r3, 800108e <_fflush_r+0x1a>
 800108a:	f7ff fb81 	bl	8000790 <__sinit>
 800108e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f3      	beq.n	800107e <_fflush_r+0xa>
 8001096:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001098:	07d0      	lsls	r0, r2, #31
 800109a:	d404      	bmi.n	80010a6 <_fflush_r+0x32>
 800109c:	0599      	lsls	r1, r3, #22
 800109e:	d402      	bmi.n	80010a6 <_fflush_r+0x32>
 80010a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80010a2:	f7ff fbf0 	bl	8000886 <__retarget_lock_acquire_recursive>
 80010a6:	4628      	mov	r0, r5
 80010a8:	4621      	mov	r1, r4
 80010aa:	f7ff ff5f 	bl	8000f6c <__sflush_r>
 80010ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80010b0:	07da      	lsls	r2, r3, #31
 80010b2:	4605      	mov	r5, r0
 80010b4:	d4e4      	bmi.n	8001080 <_fflush_r+0xc>
 80010b6:	89a3      	ldrh	r3, [r4, #12]
 80010b8:	059b      	lsls	r3, r3, #22
 80010ba:	d4e1      	bmi.n	8001080 <_fflush_r+0xc>
 80010bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80010be:	f7ff fbe3 	bl	8000888 <__retarget_lock_release_recursive>
 80010c2:	e7dd      	b.n	8001080 <_fflush_r+0xc>

080010c4 <__malloc_lock>:
 80010c4:	4801      	ldr	r0, [pc, #4]	@ (80010cc <__malloc_lock+0x8>)
 80010c6:	f7ff bbde 	b.w	8000886 <__retarget_lock_acquire_recursive>
 80010ca:	bf00      	nop
 80010cc:	200001bc 	.word	0x200001bc

080010d0 <__malloc_unlock>:
 80010d0:	4801      	ldr	r0, [pc, #4]	@ (80010d8 <__malloc_unlock+0x8>)
 80010d2:	f7ff bbd9 	b.w	8000888 <__retarget_lock_release_recursive>
 80010d6:	bf00      	nop
 80010d8:	200001bc 	.word	0x200001bc

080010dc <__sread>:
 80010dc:	b510      	push	{r4, lr}
 80010de:	460c      	mov	r4, r1
 80010e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010e4:	f000 f978 	bl	80013d8 <_read_r>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	bfab      	itete	ge
 80010ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80010ee:	89a3      	ldrhlt	r3, [r4, #12]
 80010f0:	181b      	addge	r3, r3, r0
 80010f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80010f6:	bfac      	ite	ge
 80010f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80010fa:	81a3      	strhlt	r3, [r4, #12]
 80010fc:	bd10      	pop	{r4, pc}

080010fe <__swrite>:
 80010fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001102:	461f      	mov	r7, r3
 8001104:	898b      	ldrh	r3, [r1, #12]
 8001106:	05db      	lsls	r3, r3, #23
 8001108:	4605      	mov	r5, r0
 800110a:	460c      	mov	r4, r1
 800110c:	4616      	mov	r6, r2
 800110e:	d505      	bpl.n	800111c <__swrite+0x1e>
 8001110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001114:	2302      	movs	r3, #2
 8001116:	2200      	movs	r2, #0
 8001118:	f000 f94c 	bl	80013b4 <_lseek_r>
 800111c:	89a3      	ldrh	r3, [r4, #12]
 800111e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001122:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001126:	81a3      	strh	r3, [r4, #12]
 8001128:	4632      	mov	r2, r6
 800112a:	463b      	mov	r3, r7
 800112c:	4628      	mov	r0, r5
 800112e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001132:	f000 b973 	b.w	800141c <_write_r>

08001136 <__sseek>:
 8001136:	b510      	push	{r4, lr}
 8001138:	460c      	mov	r4, r1
 800113a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800113e:	f000 f939 	bl	80013b4 <_lseek_r>
 8001142:	1c43      	adds	r3, r0, #1
 8001144:	89a3      	ldrh	r3, [r4, #12]
 8001146:	bf15      	itete	ne
 8001148:	6560      	strne	r0, [r4, #84]	@ 0x54
 800114a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800114e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001152:	81a3      	strheq	r3, [r4, #12]
 8001154:	bf18      	it	ne
 8001156:	81a3      	strhne	r3, [r4, #12]
 8001158:	bd10      	pop	{r4, pc}

0800115a <__sclose>:
 800115a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800115e:	f000 b8f7 	b.w	8001350 <_close_r>

08001162 <__swbuf_r>:
 8001162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001164:	460e      	mov	r6, r1
 8001166:	4614      	mov	r4, r2
 8001168:	4605      	mov	r5, r0
 800116a:	b118      	cbz	r0, 8001174 <__swbuf_r+0x12>
 800116c:	6a03      	ldr	r3, [r0, #32]
 800116e:	b90b      	cbnz	r3, 8001174 <__swbuf_r+0x12>
 8001170:	f7ff fb0e 	bl	8000790 <__sinit>
 8001174:	69a3      	ldr	r3, [r4, #24]
 8001176:	60a3      	str	r3, [r4, #8]
 8001178:	89a3      	ldrh	r3, [r4, #12]
 800117a:	071a      	lsls	r2, r3, #28
 800117c:	d501      	bpl.n	8001182 <__swbuf_r+0x20>
 800117e:	6923      	ldr	r3, [r4, #16]
 8001180:	b943      	cbnz	r3, 8001194 <__swbuf_r+0x32>
 8001182:	4621      	mov	r1, r4
 8001184:	4628      	mov	r0, r5
 8001186:	f000 f82b 	bl	80011e0 <__swsetup_r>
 800118a:	b118      	cbz	r0, 8001194 <__swbuf_r+0x32>
 800118c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001190:	4638      	mov	r0, r7
 8001192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001194:	6823      	ldr	r3, [r4, #0]
 8001196:	6922      	ldr	r2, [r4, #16]
 8001198:	1a98      	subs	r0, r3, r2
 800119a:	6963      	ldr	r3, [r4, #20]
 800119c:	b2f6      	uxtb	r6, r6
 800119e:	4283      	cmp	r3, r0
 80011a0:	4637      	mov	r7, r6
 80011a2:	dc05      	bgt.n	80011b0 <__swbuf_r+0x4e>
 80011a4:	4621      	mov	r1, r4
 80011a6:	4628      	mov	r0, r5
 80011a8:	f7ff ff64 	bl	8001074 <_fflush_r>
 80011ac:	2800      	cmp	r0, #0
 80011ae:	d1ed      	bne.n	800118c <__swbuf_r+0x2a>
 80011b0:	68a3      	ldr	r3, [r4, #8]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	60a3      	str	r3, [r4, #8]
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	6022      	str	r2, [r4, #0]
 80011bc:	701e      	strb	r6, [r3, #0]
 80011be:	6962      	ldr	r2, [r4, #20]
 80011c0:	1c43      	adds	r3, r0, #1
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d004      	beq.n	80011d0 <__swbuf_r+0x6e>
 80011c6:	89a3      	ldrh	r3, [r4, #12]
 80011c8:	07db      	lsls	r3, r3, #31
 80011ca:	d5e1      	bpl.n	8001190 <__swbuf_r+0x2e>
 80011cc:	2e0a      	cmp	r6, #10
 80011ce:	d1df      	bne.n	8001190 <__swbuf_r+0x2e>
 80011d0:	4621      	mov	r1, r4
 80011d2:	4628      	mov	r0, r5
 80011d4:	f7ff ff4e 	bl	8001074 <_fflush_r>
 80011d8:	2800      	cmp	r0, #0
 80011da:	d0d9      	beq.n	8001190 <__swbuf_r+0x2e>
 80011dc:	e7d6      	b.n	800118c <__swbuf_r+0x2a>
	...

080011e0 <__swsetup_r>:
 80011e0:	b538      	push	{r3, r4, r5, lr}
 80011e2:	4b29      	ldr	r3, [pc, #164]	@ (8001288 <__swsetup_r+0xa8>)
 80011e4:	4605      	mov	r5, r0
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	460c      	mov	r4, r1
 80011ea:	b118      	cbz	r0, 80011f4 <__swsetup_r+0x14>
 80011ec:	6a03      	ldr	r3, [r0, #32]
 80011ee:	b90b      	cbnz	r3, 80011f4 <__swsetup_r+0x14>
 80011f0:	f7ff face 	bl	8000790 <__sinit>
 80011f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011f8:	0719      	lsls	r1, r3, #28
 80011fa:	d422      	bmi.n	8001242 <__swsetup_r+0x62>
 80011fc:	06da      	lsls	r2, r3, #27
 80011fe:	d407      	bmi.n	8001210 <__swsetup_r+0x30>
 8001200:	2209      	movs	r2, #9
 8001202:	602a      	str	r2, [r5, #0]
 8001204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001208:	81a3      	strh	r3, [r4, #12]
 800120a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800120e:	e033      	b.n	8001278 <__swsetup_r+0x98>
 8001210:	0758      	lsls	r0, r3, #29
 8001212:	d512      	bpl.n	800123a <__swsetup_r+0x5a>
 8001214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001216:	b141      	cbz	r1, 800122a <__swsetup_r+0x4a>
 8001218:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800121c:	4299      	cmp	r1, r3
 800121e:	d002      	beq.n	8001226 <__swsetup_r+0x46>
 8001220:	4628      	mov	r0, r5
 8001222:	f000 f90d 	bl	8001440 <_free_r>
 8001226:	2300      	movs	r3, #0
 8001228:	6363      	str	r3, [r4, #52]	@ 0x34
 800122a:	89a3      	ldrh	r3, [r4, #12]
 800122c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001230:	81a3      	strh	r3, [r4, #12]
 8001232:	2300      	movs	r3, #0
 8001234:	6063      	str	r3, [r4, #4]
 8001236:	6923      	ldr	r3, [r4, #16]
 8001238:	6023      	str	r3, [r4, #0]
 800123a:	89a3      	ldrh	r3, [r4, #12]
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	81a3      	strh	r3, [r4, #12]
 8001242:	6923      	ldr	r3, [r4, #16]
 8001244:	b94b      	cbnz	r3, 800125a <__swsetup_r+0x7a>
 8001246:	89a3      	ldrh	r3, [r4, #12]
 8001248:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800124c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001250:	d003      	beq.n	800125a <__swsetup_r+0x7a>
 8001252:	4621      	mov	r1, r4
 8001254:	4628      	mov	r0, r5
 8001256:	f000 f83f 	bl	80012d8 <__smakebuf_r>
 800125a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800125e:	f013 0201 	ands.w	r2, r3, #1
 8001262:	d00a      	beq.n	800127a <__swsetup_r+0x9a>
 8001264:	2200      	movs	r2, #0
 8001266:	60a2      	str	r2, [r4, #8]
 8001268:	6962      	ldr	r2, [r4, #20]
 800126a:	4252      	negs	r2, r2
 800126c:	61a2      	str	r2, [r4, #24]
 800126e:	6922      	ldr	r2, [r4, #16]
 8001270:	b942      	cbnz	r2, 8001284 <__swsetup_r+0xa4>
 8001272:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001276:	d1c5      	bne.n	8001204 <__swsetup_r+0x24>
 8001278:	bd38      	pop	{r3, r4, r5, pc}
 800127a:	0799      	lsls	r1, r3, #30
 800127c:	bf58      	it	pl
 800127e:	6962      	ldrpl	r2, [r4, #20]
 8001280:	60a2      	str	r2, [r4, #8]
 8001282:	e7f4      	b.n	800126e <__swsetup_r+0x8e>
 8001284:	2000      	movs	r0, #0
 8001286:	e7f7      	b.n	8001278 <__swsetup_r+0x98>
 8001288:	2000000c 	.word	0x2000000c

0800128c <__swhatbuf_r>:
 800128c:	b570      	push	{r4, r5, r6, lr}
 800128e:	460c      	mov	r4, r1
 8001290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001294:	2900      	cmp	r1, #0
 8001296:	b096      	sub	sp, #88	@ 0x58
 8001298:	4615      	mov	r5, r2
 800129a:	461e      	mov	r6, r3
 800129c:	da0d      	bge.n	80012ba <__swhatbuf_r+0x2e>
 800129e:	89a3      	ldrh	r3, [r4, #12]
 80012a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80012a4:	f04f 0100 	mov.w	r1, #0
 80012a8:	bf14      	ite	ne
 80012aa:	2340      	movne	r3, #64	@ 0x40
 80012ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80012b0:	2000      	movs	r0, #0
 80012b2:	6031      	str	r1, [r6, #0]
 80012b4:	602b      	str	r3, [r5, #0]
 80012b6:	b016      	add	sp, #88	@ 0x58
 80012b8:	bd70      	pop	{r4, r5, r6, pc}
 80012ba:	466a      	mov	r2, sp
 80012bc:	f000 f858 	bl	8001370 <_fstat_r>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	dbec      	blt.n	800129e <__swhatbuf_r+0x12>
 80012c4:	9901      	ldr	r1, [sp, #4]
 80012c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80012ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80012ce:	4259      	negs	r1, r3
 80012d0:	4159      	adcs	r1, r3
 80012d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012d6:	e7eb      	b.n	80012b0 <__swhatbuf_r+0x24>

080012d8 <__smakebuf_r>:
 80012d8:	898b      	ldrh	r3, [r1, #12]
 80012da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012dc:	079d      	lsls	r5, r3, #30
 80012de:	4606      	mov	r6, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	d507      	bpl.n	80012f4 <__smakebuf_r+0x1c>
 80012e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80012e8:	6023      	str	r3, [r4, #0]
 80012ea:	6123      	str	r3, [r4, #16]
 80012ec:	2301      	movs	r3, #1
 80012ee:	6163      	str	r3, [r4, #20]
 80012f0:	b003      	add	sp, #12
 80012f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f4:	ab01      	add	r3, sp, #4
 80012f6:	466a      	mov	r2, sp
 80012f8:	f7ff ffc8 	bl	800128c <__swhatbuf_r>
 80012fc:	9f00      	ldr	r7, [sp, #0]
 80012fe:	4605      	mov	r5, r0
 8001300:	4639      	mov	r1, r7
 8001302:	4630      	mov	r0, r6
 8001304:	f7ff fc24 	bl	8000b50 <_malloc_r>
 8001308:	b948      	cbnz	r0, 800131e <__smakebuf_r+0x46>
 800130a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800130e:	059a      	lsls	r2, r3, #22
 8001310:	d4ee      	bmi.n	80012f0 <__smakebuf_r+0x18>
 8001312:	f023 0303 	bic.w	r3, r3, #3
 8001316:	f043 0302 	orr.w	r3, r3, #2
 800131a:	81a3      	strh	r3, [r4, #12]
 800131c:	e7e2      	b.n	80012e4 <__smakebuf_r+0xc>
 800131e:	89a3      	ldrh	r3, [r4, #12]
 8001320:	6020      	str	r0, [r4, #0]
 8001322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001326:	81a3      	strh	r3, [r4, #12]
 8001328:	9b01      	ldr	r3, [sp, #4]
 800132a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800132e:	b15b      	cbz	r3, 8001348 <__smakebuf_r+0x70>
 8001330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001334:	4630      	mov	r0, r6
 8001336:	f000 f82d 	bl	8001394 <_isatty_r>
 800133a:	b128      	cbz	r0, 8001348 <__smakebuf_r+0x70>
 800133c:	89a3      	ldrh	r3, [r4, #12]
 800133e:	f023 0303 	bic.w	r3, r3, #3
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	81a3      	strh	r3, [r4, #12]
 8001348:	89a3      	ldrh	r3, [r4, #12]
 800134a:	431d      	orrs	r5, r3
 800134c:	81a5      	strh	r5, [r4, #12]
 800134e:	e7cf      	b.n	80012f0 <__smakebuf_r+0x18>

08001350 <_close_r>:
 8001350:	b538      	push	{r3, r4, r5, lr}
 8001352:	4d06      	ldr	r5, [pc, #24]	@ (800136c <_close_r+0x1c>)
 8001354:	2300      	movs	r3, #0
 8001356:	4604      	mov	r4, r0
 8001358:	4608      	mov	r0, r1
 800135a:	602b      	str	r3, [r5, #0]
 800135c:	f7ff f83d 	bl	80003da <_close>
 8001360:	1c43      	adds	r3, r0, #1
 8001362:	d102      	bne.n	800136a <_close_r+0x1a>
 8001364:	682b      	ldr	r3, [r5, #0]
 8001366:	b103      	cbz	r3, 800136a <_close_r+0x1a>
 8001368:	6023      	str	r3, [r4, #0]
 800136a:	bd38      	pop	{r3, r4, r5, pc}
 800136c:	200001c8 	.word	0x200001c8

08001370 <_fstat_r>:
 8001370:	b538      	push	{r3, r4, r5, lr}
 8001372:	4d07      	ldr	r5, [pc, #28]	@ (8001390 <_fstat_r+0x20>)
 8001374:	2300      	movs	r3, #0
 8001376:	4604      	mov	r4, r0
 8001378:	4608      	mov	r0, r1
 800137a:	4611      	mov	r1, r2
 800137c:	602b      	str	r3, [r5, #0]
 800137e:	f7ff f838 	bl	80003f2 <_fstat>
 8001382:	1c43      	adds	r3, r0, #1
 8001384:	d102      	bne.n	800138c <_fstat_r+0x1c>
 8001386:	682b      	ldr	r3, [r5, #0]
 8001388:	b103      	cbz	r3, 800138c <_fstat_r+0x1c>
 800138a:	6023      	str	r3, [r4, #0]
 800138c:	bd38      	pop	{r3, r4, r5, pc}
 800138e:	bf00      	nop
 8001390:	200001c8 	.word	0x200001c8

08001394 <_isatty_r>:
 8001394:	b538      	push	{r3, r4, r5, lr}
 8001396:	4d06      	ldr	r5, [pc, #24]	@ (80013b0 <_isatty_r+0x1c>)
 8001398:	2300      	movs	r3, #0
 800139a:	4604      	mov	r4, r0
 800139c:	4608      	mov	r0, r1
 800139e:	602b      	str	r3, [r5, #0]
 80013a0:	f7ff f837 	bl	8000412 <_isatty>
 80013a4:	1c43      	adds	r3, r0, #1
 80013a6:	d102      	bne.n	80013ae <_isatty_r+0x1a>
 80013a8:	682b      	ldr	r3, [r5, #0]
 80013aa:	b103      	cbz	r3, 80013ae <_isatty_r+0x1a>
 80013ac:	6023      	str	r3, [r4, #0]
 80013ae:	bd38      	pop	{r3, r4, r5, pc}
 80013b0:	200001c8 	.word	0x200001c8

080013b4 <_lseek_r>:
 80013b4:	b538      	push	{r3, r4, r5, lr}
 80013b6:	4d07      	ldr	r5, [pc, #28]	@ (80013d4 <_lseek_r+0x20>)
 80013b8:	4604      	mov	r4, r0
 80013ba:	4608      	mov	r0, r1
 80013bc:	4611      	mov	r1, r2
 80013be:	2200      	movs	r2, #0
 80013c0:	602a      	str	r2, [r5, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	f7ff f830 	bl	8000428 <_lseek>
 80013c8:	1c43      	adds	r3, r0, #1
 80013ca:	d102      	bne.n	80013d2 <_lseek_r+0x1e>
 80013cc:	682b      	ldr	r3, [r5, #0]
 80013ce:	b103      	cbz	r3, 80013d2 <_lseek_r+0x1e>
 80013d0:	6023      	str	r3, [r4, #0]
 80013d2:	bd38      	pop	{r3, r4, r5, pc}
 80013d4:	200001c8 	.word	0x200001c8

080013d8 <_read_r>:
 80013d8:	b538      	push	{r3, r4, r5, lr}
 80013da:	4d07      	ldr	r5, [pc, #28]	@ (80013f8 <_read_r+0x20>)
 80013dc:	4604      	mov	r4, r0
 80013de:	4608      	mov	r0, r1
 80013e0:	4611      	mov	r1, r2
 80013e2:	2200      	movs	r2, #0
 80013e4:	602a      	str	r2, [r5, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	f7fe ffbe 	bl	8000368 <_read>
 80013ec:	1c43      	adds	r3, r0, #1
 80013ee:	d102      	bne.n	80013f6 <_read_r+0x1e>
 80013f0:	682b      	ldr	r3, [r5, #0]
 80013f2:	b103      	cbz	r3, 80013f6 <_read_r+0x1e>
 80013f4:	6023      	str	r3, [r4, #0]
 80013f6:	bd38      	pop	{r3, r4, r5, pc}
 80013f8:	200001c8 	.word	0x200001c8

080013fc <_sbrk_r>:
 80013fc:	b538      	push	{r3, r4, r5, lr}
 80013fe:	4d06      	ldr	r5, [pc, #24]	@ (8001418 <_sbrk_r+0x1c>)
 8001400:	2300      	movs	r3, #0
 8001402:	4604      	mov	r4, r0
 8001404:	4608      	mov	r0, r1
 8001406:	602b      	str	r3, [r5, #0]
 8001408:	f7ff f81c 	bl	8000444 <_sbrk>
 800140c:	1c43      	adds	r3, r0, #1
 800140e:	d102      	bne.n	8001416 <_sbrk_r+0x1a>
 8001410:	682b      	ldr	r3, [r5, #0]
 8001412:	b103      	cbz	r3, 8001416 <_sbrk_r+0x1a>
 8001414:	6023      	str	r3, [r4, #0]
 8001416:	bd38      	pop	{r3, r4, r5, pc}
 8001418:	200001c8 	.word	0x200001c8

0800141c <_write_r>:
 800141c:	b538      	push	{r3, r4, r5, lr}
 800141e:	4d07      	ldr	r5, [pc, #28]	@ (800143c <_write_r+0x20>)
 8001420:	4604      	mov	r4, r0
 8001422:	4608      	mov	r0, r1
 8001424:	4611      	mov	r1, r2
 8001426:	2200      	movs	r2, #0
 8001428:	602a      	str	r2, [r5, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	f7fe ffb9 	bl	80003a2 <_write>
 8001430:	1c43      	adds	r3, r0, #1
 8001432:	d102      	bne.n	800143a <_write_r+0x1e>
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	b103      	cbz	r3, 800143a <_write_r+0x1e>
 8001438:	6023      	str	r3, [r4, #0]
 800143a:	bd38      	pop	{r3, r4, r5, pc}
 800143c:	200001c8 	.word	0x200001c8

08001440 <_free_r>:
 8001440:	b538      	push	{r3, r4, r5, lr}
 8001442:	4605      	mov	r5, r0
 8001444:	2900      	cmp	r1, #0
 8001446:	d041      	beq.n	80014cc <_free_r+0x8c>
 8001448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800144c:	1f0c      	subs	r4, r1, #4
 800144e:	2b00      	cmp	r3, #0
 8001450:	bfb8      	it	lt
 8001452:	18e4      	addlt	r4, r4, r3
 8001454:	f7ff fe36 	bl	80010c4 <__malloc_lock>
 8001458:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <_free_r+0x90>)
 800145a:	6813      	ldr	r3, [r2, #0]
 800145c:	b933      	cbnz	r3, 800146c <_free_r+0x2c>
 800145e:	6063      	str	r3, [r4, #4]
 8001460:	6014      	str	r4, [r2, #0]
 8001462:	4628      	mov	r0, r5
 8001464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001468:	f7ff be32 	b.w	80010d0 <__malloc_unlock>
 800146c:	42a3      	cmp	r3, r4
 800146e:	d908      	bls.n	8001482 <_free_r+0x42>
 8001470:	6820      	ldr	r0, [r4, #0]
 8001472:	1821      	adds	r1, r4, r0
 8001474:	428b      	cmp	r3, r1
 8001476:	bf01      	itttt	eq
 8001478:	6819      	ldreq	r1, [r3, #0]
 800147a:	685b      	ldreq	r3, [r3, #4]
 800147c:	1809      	addeq	r1, r1, r0
 800147e:	6021      	streq	r1, [r4, #0]
 8001480:	e7ed      	b.n	800145e <_free_r+0x1e>
 8001482:	461a      	mov	r2, r3
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	b10b      	cbz	r3, 800148c <_free_r+0x4c>
 8001488:	42a3      	cmp	r3, r4
 800148a:	d9fa      	bls.n	8001482 <_free_r+0x42>
 800148c:	6811      	ldr	r1, [r2, #0]
 800148e:	1850      	adds	r0, r2, r1
 8001490:	42a0      	cmp	r0, r4
 8001492:	d10b      	bne.n	80014ac <_free_r+0x6c>
 8001494:	6820      	ldr	r0, [r4, #0]
 8001496:	4401      	add	r1, r0
 8001498:	1850      	adds	r0, r2, r1
 800149a:	4283      	cmp	r3, r0
 800149c:	6011      	str	r1, [r2, #0]
 800149e:	d1e0      	bne.n	8001462 <_free_r+0x22>
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	6053      	str	r3, [r2, #4]
 80014a6:	4408      	add	r0, r1
 80014a8:	6010      	str	r0, [r2, #0]
 80014aa:	e7da      	b.n	8001462 <_free_r+0x22>
 80014ac:	d902      	bls.n	80014b4 <_free_r+0x74>
 80014ae:	230c      	movs	r3, #12
 80014b0:	602b      	str	r3, [r5, #0]
 80014b2:	e7d6      	b.n	8001462 <_free_r+0x22>
 80014b4:	6820      	ldr	r0, [r4, #0]
 80014b6:	1821      	adds	r1, r4, r0
 80014b8:	428b      	cmp	r3, r1
 80014ba:	bf04      	itt	eq
 80014bc:	6819      	ldreq	r1, [r3, #0]
 80014be:	685b      	ldreq	r3, [r3, #4]
 80014c0:	6063      	str	r3, [r4, #4]
 80014c2:	bf04      	itt	eq
 80014c4:	1809      	addeq	r1, r1, r0
 80014c6:	6021      	streq	r1, [r4, #0]
 80014c8:	6054      	str	r4, [r2, #4]
 80014ca:	e7ca      	b.n	8001462 <_free_r+0x22>
 80014cc:	bd38      	pop	{r3, r4, r5, pc}
 80014ce:	bf00      	nop
 80014d0:	200001c4 	.word	0x200001c4

080014d4 <_init>:
 80014d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014d6:	bf00      	nop
 80014d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014da:	bc08      	pop	{r3}
 80014dc:	469e      	mov	lr, r3
 80014de:	4770      	bx	lr

080014e0 <_fini>:
 80014e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e2:	bf00      	nop
 80014e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014e6:	bc08      	pop	{r3}
 80014e8:	469e      	mov	lr, r3
 80014ea:	4770      	bx	lr
